{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Button, Paper, Grid, Table, TextField, TableBody, TableCell, TableContainer, TableHead, TableRow, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';\n// import axios from 'axios';\n// import { gridSpacing } from 'store/constant';\n\n// function InputScoreCSB02() {\n//   const [projects, setProjects] = useState([]);\n//   const [open, setOpen] = useState(false);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const [Data, setData] = useState([\n//     { id: 1, name: 'วัตถุประสงค์และขอบเขตโครงงาน', fullscores: '10', score: '' },\n//     { id: 2, name: 'ความเข้าใจระบบงานเดิม/ทฤษฎีหรืองานวิจัย ที่นำมาใช้พัฒนาโครงงาน', fullscores: '20', score: '' },\n//     { id: 3, name: 'การศึกษาความต้องการของระบบ และการออกแบบ', fullscores: '20', score: '' },\n//     { id: 4, name: 'การนำเสนอโครงงาน', fullscores: '20', score: '' },\n//     { id: 5, name: 'รูปแบบรายงาน', fullscores: '10', score: '' },\n//     { id: 6, name: 'แนวทางการดำเนินงาน', fullscores: '10', score: '' },\n//     { id: 7, name: 'คะแนนรวม', fullscores: '90', score: '' },\n//   ]);\n\n//   const [examResults, setExamResults] = useState([]);\n\n//   useEffect(() => {\n//     const fetchExamResults = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:9999/Exam_results');\n//         if (response.data && Array.isArray(response.data)) {\n//           setExamResults(response.data);\n//         }\n//       } catch (error) {\n//         console.error('Error fetching exam results:', error);\n//       }\n//     };\n\n//     fetchExamResults();\n//   }, []);\n\n//  useEffect(() => {\n//   const fetchProjects = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:9999/Project');\n//       setProjects(response.data); // Set all projects without filtering\n//     } catch (error) {\n//       console.error('Error fetching projects:', error);\n//     }\n//   };\n\n//   fetchProjects();\n// }, [examResults]); // You can remove [examResults] dependency if it's no longer needed.\n\n//   const handleChange4 = (id, field, value) => {\n//     console.log(value);\n\n//     const isValidInput = (input) => {\n//       const regex = /^[0-9]*$/;\n//       return regex.test(input);\n//     };\n\n//     setData(prevData => {\n//       const updatedData = prevData.map(item => {\n//         if (item.id === id) {\n//           const numericValue = Number(value);\n//           if (field === 'score') {\n//             if (!isValidInput(value) || numericValue < 0 || numericValue > Number(item.fullscores) || isNaN(numericValue)) {\n//               return item;\n//             }\n//           }\n//           return { ...item, [field]: value };\n//         }\n//         return item;\n//       });\n\n//       const totalScore = updatedData.reduce((acc, item) => {\n//         if (item.id !== 7) {\n//           return acc + Number(item.score || 0);\n//         }\n//         return acc;\n//       }, 0);\n\n//       return updatedData.map(item => {\n//         if (item.id === 7) {\n//           return { ...item, score: totalScore.toString() };\n//         }\n//         return item;\n//       });\n//     });\n//   };\n\n//   const handleDonNotGoAny = () => {\n//     const updatedData = projects.map(project => ({ ...project, isRed: true, isDisabled: true }));\n//     setProjects(updatedData);\n//   };\n\n//   const handleLinkClick = (index) => {\n//     setSelectedProject(projects[index]);\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   const handleDisableRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isDisabled: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleRedRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isRed: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleSavePopup = async (e) => {\n//     if (e) {\n//       e.preventDefault();\n//       await saveScore();\n\n//       setProjects(prevProjects => prevProjects.filter(project => project.P_id !== selectedProject.P_id));\n\n//       setOpen(false);\n//     } else {\n//       alert('กรุณาตรวจสอบให้ครบทุกหัวข้อก่อนทำการบันทึก');\n//     }\n//   };\n\n//   const saveScore = async () => {\n//     const totalScore = Number(Data.find(item => item.id === 7)?.score || '0');\n//     const erStatus = totalScore >= 50 ? 'ผ่าน' : 'ไม่ผ่าน';\n//     const erCSB02 = totalScore >= 50 ? 'ผ่าน' : 'ไม่ผ่าน'; // Update Er_CSB02 based on totalScore\n//     const erName = selectedProject.P_name;\n//     const erCSB01 = examResults.find(result => result.Er_name === erName)?.Er_CSB01 || '0';\n\n//     try {\n//       const existingResult = examResults.find(result => result.Er_name === erName);\n\n//       if (existingResult && existingResult._id) {\n//         // If the project has an existing result, use PUT to update the record\n//         const response = await axios.put(`http://localhost:9999/Exam_results/${existingResult._id}`, {\n//           Er_name: erName,\n//           Er_CSB01: erCSB01,\n//           Er_CSB02: erCSB02,\n//           Er_status: totalScore >= 50 ? 'กำลังดำเนินการ' : 'ไม่ผ่าน'\n//         });\n\n//         if (response.status === 200) {\n//           console.log('Score updated successfully!');\n//           setOpenDialog(true);\n//         } else {\n//           console.error('Failed to update score');\n//         }\n//       } else {\n//         console.error('No existing result found for the project');\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <Paper style={{ padding: 16 }}>\n//       <Grid container spacing={gridSpacing}>\n//         <Grid item xs={12}>\n//           <Grid container direction=\"column\" spacing={1}>\n//             <h1>ประเมินการสอบก้าวหน้าโครงงานพิเศษ</h1>\n//             <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">\n//               ไม่เข้าร่วมประเมินทั้งหมด\n//             </Button>\n//             <TableContainer>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>ลำดับที่</TableCell>\n//                     <TableCell>ชื่อโครงงาน</TableCell>\n//                     <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\n//                     <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\n//                     <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {projects.map((project, index) => (\n//                     <TableRow key={project.P_id}>\n//                       <TableCell>{index + 1}</TableCell>\n//                       <TableCell>{project.P_name}</TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleLinkClick(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled}\n//                         >\n//                           ประเมิน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleDisableRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่ประสงค์ลงคะแนน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleRedRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่เข้าประเมิน\n//                         </Button>\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </Grid>\n//         </Grid>\n//       </Grid>\n\n//       {selectedProject && (\n//         <Dialog \n//           open={open} \n//           onClose={handleClose} \n//           maxWidth=\"lg\" \n//           fullWidth \n//           PaperProps={{\n//             style: {\n//               minHeight: '80vh', \n//               maxHeight: '90vh',\n//             }\n//           }}\n//         >\n//           <DialogTitle>ประเมินคะแนนโครงงาน</DialogTitle>\n//           <DialogContent>\n//           <Typography variant=\"h3\">ชื่อโครงงาน: {selectedProject.P_name}</Typography>\n//             <Typography>นักเรียนคนที่ 1: {selectedProject.P_S1}</Typography>\n//             <Typography>นักเรียนคนที่ 2: {selectedProject.P_S2}</Typography>\n//             <Typography>ที่ปรึกษา: {selectedProject.P_T}</Typography>\n//             <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\n//             <Grid container spacing={2} style={{ padding: '0 16px' }}>\n//               <Grid item xs={12}>\n//                 <Table>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell>หัวข้อการประเมิน</TableCell>\n//                       <TableCell>คะแนนเต็ม</TableCell>\n//                       <TableCell>คะแนนที่ได้</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {Data.map((item) => (\n//                       <TableRow key={item.id}>\n//                         <TableCell>{item.name}</TableCell>\n//                         <TableCell>{item.fullscores}</TableCell>\n//                         <TableCell>\n//                           <TextField\n//                             value={item.score}\n//                             onChange={(e) => handleChange4(item.id, 'score', e.target.value)}\n//                           />\n//                         </TableCell>\n//                       </TableRow>\n//                     ))}\n//                   </TableBody>\n//                 </Table>\n//               </Grid>\n//             </Grid>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={handleClose} color=\"primary\">\n//               ปิด\n//             </Button>\n//             <Button onClick={handleSavePopup} color=\"primary\">\n//               บันทึก\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n//         <DialogTitle>บันทึกข้อมูลสำเร็จ</DialogTitle>\n//         <DialogContent>\n//           <Typography>การบันทึกข้อมูลเสร็จสิ้น</Typography>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpenDialog(false)} color=\"primary\">\n//             ตกลง\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </Paper>\n//   );\n// }\n\n// export default InputScoreCSB02;","map":{"version":3,"names":[],"sources":["C:/test/create-react-app/src/views/utilities/InputScoreCSB02.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Button, Paper, Grid, Table, TextField, TableBody, TableCell, TableContainer, TableHead, TableRow, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';\n// import axios from 'axios';\n// import { gridSpacing } from 'store/constant';\n\n// function InputScoreCSB02() {\n//   const [projects, setProjects] = useState([]);\n//   const [open, setOpen] = useState(false);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const [Data, setData] = useState([\n//     { id: 1, name: 'วัตถุประสงค์และขอบเขตโครงงาน', fullscores: '10', score: '' },\n//     { id: 2, name: 'ความเข้าใจระบบงานเดิม/ทฤษฎีหรืองานวิจัย ที่นำมาใช้พัฒนาโครงงาน', fullscores: '20', score: '' },\n//     { id: 3, name: 'การศึกษาความต้องการของระบบ และการออกแบบ', fullscores: '20', score: '' },\n//     { id: 4, name: 'การนำเสนอโครงงาน', fullscores: '20', score: '' },\n//     { id: 5, name: 'รูปแบบรายงาน', fullscores: '10', score: '' },\n//     { id: 6, name: 'แนวทางการดำเนินงาน', fullscores: '10', score: '' },\n//     { id: 7, name: 'คะแนนรวม', fullscores: '90', score: '' },\n//   ]);\n\n//   const [examResults, setExamResults] = useState([]);\n\n//   useEffect(() => {\n//     const fetchExamResults = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:9999/Exam_results');\n//         if (response.data && Array.isArray(response.data)) {\n//           setExamResults(response.data);\n//         }\n//       } catch (error) {\n//         console.error('Error fetching exam results:', error);\n//       }\n//     };\n\n//     fetchExamResults();\n//   }, []);\n\n//  useEffect(() => {\n//   const fetchProjects = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:9999/Project');\n//       setProjects(response.data); // Set all projects without filtering\n//     } catch (error) {\n//       console.error('Error fetching projects:', error);\n//     }\n//   };\n\n//   fetchProjects();\n// }, [examResults]); // You can remove [examResults] dependency if it's no longer needed.\n\n//   const handleChange4 = (id, field, value) => {\n//     console.log(value);\n\n//     const isValidInput = (input) => {\n//       const regex = /^[0-9]*$/;\n//       return regex.test(input);\n//     };\n\n//     setData(prevData => {\n//       const updatedData = prevData.map(item => {\n//         if (item.id === id) {\n//           const numericValue = Number(value);\n//           if (field === 'score') {\n//             if (!isValidInput(value) || numericValue < 0 || numericValue > Number(item.fullscores) || isNaN(numericValue)) {\n//               return item;\n//             }\n//           }\n//           return { ...item, [field]: value };\n//         }\n//         return item;\n//       });\n\n//       const totalScore = updatedData.reduce((acc, item) => {\n//         if (item.id !== 7) {\n//           return acc + Number(item.score || 0);\n//         }\n//         return acc;\n//       }, 0);\n\n//       return updatedData.map(item => {\n//         if (item.id === 7) {\n//           return { ...item, score: totalScore.toString() };\n//         }\n//         return item;\n//       });\n//     });\n//   };\n\n//   const handleDonNotGoAny = () => {\n//     const updatedData = projects.map(project => ({ ...project, isRed: true, isDisabled: true }));\n//     setProjects(updatedData);\n//   };\n\n//   const handleLinkClick = (index) => {\n//     setSelectedProject(projects[index]);\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   const handleDisableRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isDisabled: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleRedRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isRed: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleSavePopup = async (e) => {\n//     if (e) {\n//       e.preventDefault();\n//       await saveScore();\n\n//       setProjects(prevProjects => prevProjects.filter(project => project.P_id !== selectedProject.P_id));\n\n//       setOpen(false);\n//     } else {\n//       alert('กรุณาตรวจสอบให้ครบทุกหัวข้อก่อนทำการบันทึก');\n//     }\n//   };\n\n//   const saveScore = async () => {\n//     const totalScore = Number(Data.find(item => item.id === 7)?.score || '0');\n//     const erStatus = totalScore >= 50 ? 'ผ่าน' : 'ไม่ผ่าน';\n//     const erCSB02 = totalScore >= 50 ? 'ผ่าน' : 'ไม่ผ่าน'; // Update Er_CSB02 based on totalScore\n//     const erName = selectedProject.P_name;\n//     const erCSB01 = examResults.find(result => result.Er_name === erName)?.Er_CSB01 || '0';\n  \n//     try {\n//       const existingResult = examResults.find(result => result.Er_name === erName);\n      \n//       if (existingResult && existingResult._id) {\n//         // If the project has an existing result, use PUT to update the record\n//         const response = await axios.put(`http://localhost:9999/Exam_results/${existingResult._id}`, {\n//           Er_name: erName,\n//           Er_CSB01: erCSB01,\n//           Er_CSB02: erCSB02,\n//           Er_status: totalScore >= 50 ? 'กำลังดำเนินการ' : 'ไม่ผ่าน'\n//         });\n  \n//         if (response.status === 200) {\n//           console.log('Score updated successfully!');\n//           setOpenDialog(true);\n//         } else {\n//           console.error('Failed to update score');\n//         }\n//       } else {\n//         console.error('No existing result found for the project');\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n  \n//   return (\n//     <Paper style={{ padding: 16 }}>\n//       <Grid container spacing={gridSpacing}>\n//         <Grid item xs={12}>\n//           <Grid container direction=\"column\" spacing={1}>\n//             <h1>ประเมินการสอบก้าวหน้าโครงงานพิเศษ</h1>\n//             <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">\n//               ไม่เข้าร่วมประเมินทั้งหมด\n//             </Button>\n//             <TableContainer>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>ลำดับที่</TableCell>\n//                     <TableCell>ชื่อโครงงาน</TableCell>\n//                     <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\n//                     <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\n//                     <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {projects.map((project, index) => (\n//                     <TableRow key={project.P_id}>\n//                       <TableCell>{index + 1}</TableCell>\n//                       <TableCell>{project.P_name}</TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleLinkClick(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled}\n//                         >\n//                           ประเมิน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleDisableRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่ประสงค์ลงคะแนน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleRedRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่เข้าประเมิน\n//                         </Button>\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </Grid>\n//         </Grid>\n//       </Grid>\n\n//       {selectedProject && (\n//         <Dialog \n//           open={open} \n//           onClose={handleClose} \n//           maxWidth=\"lg\" \n//           fullWidth \n//           PaperProps={{\n//             style: {\n//               minHeight: '80vh', \n//               maxHeight: '90vh',\n//             }\n//           }}\n//         >\n//           <DialogTitle>ประเมินคะแนนโครงงาน</DialogTitle>\n//           <DialogContent>\n//           <Typography variant=\"h3\">ชื่อโครงงาน: {selectedProject.P_name}</Typography>\n//             <Typography>นักเรียนคนที่ 1: {selectedProject.P_S1}</Typography>\n//             <Typography>นักเรียนคนที่ 2: {selectedProject.P_S2}</Typography>\n//             <Typography>ที่ปรึกษา: {selectedProject.P_T}</Typography>\n//             <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\n//             <Grid container spacing={2} style={{ padding: '0 16px' }}>\n//               <Grid item xs={12}>\n//                 <Table>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell>หัวข้อการประเมิน</TableCell>\n//                       <TableCell>คะแนนเต็ม</TableCell>\n//                       <TableCell>คะแนนที่ได้</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {Data.map((item) => (\n//                       <TableRow key={item.id}>\n//                         <TableCell>{item.name}</TableCell>\n//                         <TableCell>{item.fullscores}</TableCell>\n//                         <TableCell>\n//                           <TextField\n//                             value={item.score}\n//                             onChange={(e) => handleChange4(item.id, 'score', e.target.value)}\n//                           />\n//                         </TableCell>\n//                       </TableRow>\n//                     ))}\n//                   </TableBody>\n//                 </Table>\n//               </Grid>\n//             </Grid>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={handleClose} color=\"primary\">\n//               ปิด\n//             </Button>\n//             <Button onClick={handleSavePopup} color=\"primary\">\n//               บันทึก\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n\n//       <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n//         <DialogTitle>บันทึกข้อมูลสำเร็จ</DialogTitle>\n//         <DialogContent>\n//           <Typography>การบันทึกข้อมูลเสร็จสิ้น</Typography>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpenDialog(false)} color=\"primary\">\n//             ตกลง\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </Paper>\n//   );\n// }\n\n// export default InputScoreCSB02;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}