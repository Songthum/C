{"ast":null,"code":"// import { useState } from 'react';\n// import { useSelector } from 'react-redux';\n\n// // material-ui\n// import { useTheme } from '@mui/material/styles';\n// import {\n//   Box,\n//   Button,\n//   Checkbox,\n//   Divider,\n//   FormControl,\n//   FormControlLabel,\n//   FormHelperText,\n//   Grid,\n//   IconButton,\n//   InputAdornment,\n//   InputLabel,\n//   OutlinedInput,\n//   Stack,\n//   Typography,\n//   useMediaQuery\n// } from '@mui/material';\n\n// // third party\n// import * as Yup from 'yup';\n// import { Formik } from 'formik';\n\n// // project imports\n// import useScriptRef from 'hooks/useScriptRef';\n// import AnimateButton from 'ui-component/extended/AnimateButton';\n\n// // assets\n// import Visibility from '@mui/icons-material/Visibility';\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\n\n// // ============================|| FIREBASE - LOGIN ||============================ //\n\n// const FirebaseLogin = ({ ...others }) => {\n//   const theme = useTheme();\n//   const scriptedRef = useScriptRef();\n//   const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n//   const customization = useSelector((state) => state.customization);\n//   const [checked, setChecked] = useState(true);\n\n//   const googleHandler = async () => {\n//     console.error('Login');\n//   };\n\n//   const [showPassword, setShowPassword] = useState(false);\n//   const handleClickShowPassword = () => {\n//     setShowPassword(!showPassword);\n//   };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n//   const validUsers = [\n//     { email: 'S63example@icit.com', password: 'password123' },\n//     { email: 'TCSexample@icit.com', password: 'password456' },\n//     { email: 'Adminexample@icit.com', password: 'password789' }\n//   ];\n\n//   return (\n//     <>\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\n//           <Box sx={{ mb: 2 }}>\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       <Formik\n//         initialValues={{\n//           email: '',\n//           password: '',\n//           submit: null\n//         }}\n//         validationSchema={Yup.object().shape({\n//           email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n//           password: Yup.string().max(255).required('Password is required')\n//         })}\n//         onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n//           try {\n//             if (scriptedRef.current) {\n//               setStatus({ success: true });\n//               setSubmitting(false);\n\n//               const user = validUsers.find(\n//                 (u) => u.email === values.email && u.password === values.password\n//               );\n\n//               if (user) {\n//                 if (values.email.startsWith('S63')) {\n//                   window.location.href = '/free/studen'; // ไปที่หน้า student\n//                 } else if (values.email.startsWith('TCS')) {\n//                   window.location.href = '/free/teacher'; // ไปที่หน้า teacher\n//                 } else if (values.email.startsWith('Admin')) {\n//                   window.location.href = '/free/staff'; // ไปที่หน้า staff\n//                 }\n//               } else {\n//                 setErrors({ submit: 'Invalid email or password' }); // ถ้าไม่ตรงแสดงข้อผิดพลาด\n//               }\n//             }\n//           } catch (err) {\n//             console.error(err);\n//             if (scriptedRef.current) {\n//               setStatus({ success: false });\n//               setErrors({ submit: err.message });\n//               setSubmitting(false);\n//             }\n//           }\n//         }}\n//       >\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//           <form noValidate onSubmit={handleSubmit} {...others}>\n//             <FormControl fullWidth error={Boolean(touched.email && errors.email)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-email-login\">Icit Account</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-email-login\"\n//                 type=\"email\"\n//                 value={values.email}\n//                 name=\"email\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 label=\"Icit Account\"\n//                 inputProps={{}}\n//               />\n//               {touched.email && errors.email && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n//                   {errors.email}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-password-login\"\n//                 type={showPassword ? 'text' : 'password'}\n//                 value={values.password}\n//                 name=\"password\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       aria-label=\"toggle password visibility\"\n//                       onClick={handleClickShowPassword}\n//                       onMouseDown={handleMouseDownPassword}\n//                       edge=\"end\"\n//                       size=\"large\"\n//                     >\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//                 label=\"Password\"\n//                 inputProps={{}}\n//               />\n//               {touched.password && errors.password && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n//                   {errors.password}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n//             {errors.submit && (\n//               <Box sx={{ mt: 3 }}>\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\n//               </Box>\n//             )}\n\n//             <Box sx={{ mt: 2 }}>\n//               <AnimateButton>\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n//                   Sign in\n//                 </Button>\n//               </AnimateButton>\n//             </Box>\n//             <Typography\n//               component=\"a\"\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\n//               target=\"_blank\"\n//               rel=\"noopener noreferrer\"\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\n//             >\n//               Forgot ICIT Account Password\n//             </Typography>\n//           </form>\n//         )}\n//       </Formik>\n//     </>\n//   );\n// };\n\n// export default FirebaseLogin;","map":{"version":3,"names":[],"sources":["C:/CSB-haha/create-react-app/src/views/pages/authentication/auth-forms/AuthLogin.js"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// // material-ui\r\n// import { useTheme } from '@mui/material/styles';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   Checkbox,\r\n//   Divider,\r\n//   FormControl,\r\n//   FormControlLabel,\r\n//   FormHelperText,\r\n//   Grid,\r\n//   IconButton,\r\n//   InputAdornment,\r\n//   InputLabel,\r\n//   OutlinedInput,\r\n//   Stack,\r\n//   Typography,\r\n//   useMediaQuery\r\n// } from '@mui/material';\r\n\r\n// // third party\r\n// import * as Yup from 'yup';\r\n// import { Formik } from 'formik';\r\n\r\n// // project imports\r\n// import useScriptRef from 'hooks/useScriptRef';\r\n// import AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// // assets\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n\r\n// // ============================|| FIREBASE - LOGIN ||============================ //\r\n\r\n// const FirebaseLogin = ({ ...others }) => {\r\n//   const theme = useTheme();\r\n//   const scriptedRef = useScriptRef();\r\n//   const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n//   const customization = useSelector((state) => state.customization);\r\n//   const [checked, setChecked] = useState(true);\r\n\r\n//   const googleHandler = async () => {\r\n//     console.error('Login');\r\n//   };\r\n\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword(!showPassword);\r\n//   };\r\n\r\n//   const handleMouseDownPassword = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   const validUsers = [\r\n//     { email: 'S63example@icit.com', password: 'password123' },\r\n//     { email: 'TCSexample@icit.com', password: 'password456' },\r\n//     { email: 'Adminexample@icit.com', password: 'password789' }\r\n//   ];\r\n\r\n//   return (\r\n//     <>\r\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n//           <Box sx={{ mb: 2 }}>\r\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       <Formik\r\n//         initialValues={{\r\n//           email: '',\r\n//           password: '',\r\n//           submit: null\r\n//         }}\r\n//         validationSchema={Yup.object().shape({\r\n//           email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n//           password: Yup.string().max(255).required('Password is required')\r\n//         })}\r\n//         onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n//           try {\r\n//             if (scriptedRef.current) {\r\n//               setStatus({ success: true });\r\n//               setSubmitting(false);\r\n\r\n//               const user = validUsers.find(\r\n//                 (u) => u.email === values.email && u.password === values.password\r\n//               );\r\n\r\n//               if (user) {\r\n//                 if (values.email.startsWith('S63')) {\r\n//                   window.location.href = '/free/studen'; // ไปที่หน้า student\r\n//                 } else if (values.email.startsWith('TCS')) {\r\n//                   window.location.href = '/free/teacher'; // ไปที่หน้า teacher\r\n//                 } else if (values.email.startsWith('Admin')) {\r\n//                   window.location.href = '/free/staff'; // ไปที่หน้า staff\r\n//                 }\r\n//               } else {\r\n//                 setErrors({ submit: 'Invalid email or password' }); // ถ้าไม่ตรงแสดงข้อผิดพลาด\r\n//               }\r\n//             }\r\n//           } catch (err) {\r\n//             console.error(err);\r\n//             if (scriptedRef.current) {\r\n//               setStatus({ success: false });\r\n//               setErrors({ submit: err.message });\r\n//               setSubmitting(false);\r\n//             }\r\n//           }\r\n//         }}\r\n//       >\r\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n//           <form noValidate onSubmit={handleSubmit} {...others}>\r\n//             <FormControl fullWidth error={Boolean(touched.email && errors.email)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-email-login\">Icit Account</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-email-login\"\r\n//                 type=\"email\"\r\n//                 value={values.email}\r\n//                 name=\"email\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 label=\"Icit Account\"\r\n//                 inputProps={{}}\r\n//               />\r\n//               {touched.email && errors.email && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n//                   {errors.email}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-password-login\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={values.password}\r\n//                 name=\"password\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 endAdornment={\r\n//                   <InputAdornment position=\"end\">\r\n//                     <IconButton\r\n//                       aria-label=\"toggle password visibility\"\r\n//                       onClick={handleClickShowPassword}\r\n//                       onMouseDown={handleMouseDownPassword}\r\n//                       edge=\"end\"\r\n//                       size=\"large\"\r\n//                     >\r\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\r\n//                     </IconButton>\r\n//                   </InputAdornment>\r\n//                 }\r\n//                 label=\"Password\"\r\n//                 inputProps={{}}\r\n//               />\r\n//               {touched.password && errors.password && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n//                   {errors.password}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n//             {errors.submit && (\r\n//               <Box sx={{ mt: 3 }}>\r\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\r\n//               </Box>\r\n//             )}\r\n\r\n//             <Box sx={{ mt: 2 }}>\r\n//               <AnimateButton>\r\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n//                   Sign in\r\n//                 </Button>\r\n//               </AnimateButton>\r\n//             </Box>\r\n//             <Typography\r\n//               component=\"a\"\r\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n//               target=\"_blank\"\r\n//               rel=\"noopener noreferrer\"\r\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\r\n//             >\r\n//               Forgot ICIT Account Password\r\n//             </Typography>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FirebaseLogin;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}