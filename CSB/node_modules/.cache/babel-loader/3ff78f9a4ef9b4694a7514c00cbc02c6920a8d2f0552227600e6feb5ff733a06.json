{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Table, Checkbox, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\n// import Select from '@mui/material/Select';\n// import MenuItem from '@mui/material/MenuItem';\n// import TextField from '@mui/material/TextField';\n// import Box from '@mui/material/Box';\n// import Paper from '@mui/material/Paper';\n// import { Stack } from '@mui/system';\n// import InputLabel from '@mui/material/InputLabel';\n// import FormControl from '@mui/material/FormControl';\n// import axios from 'axios';\n// import { Grid } from '@mui/material';\n// import MainCard from 'ui-component/cards/MainCard';\n// import { gridSpacing } from 'store/constant';\n\n// function InputScoreCSB01() {\n//   const [tableData, setTableData] = useState([\n//     { id: 1, name: 'จัดการการสอบโครงงานพิเศษ', link: 'path/to/file1.txt', status: 'CSB01', isDisabled: false, isRed: false },\n\n//   ]);\n\n//   const project = [\n//     {\n//       \"ID\": \"001\",\n//       \"Name\": \"ระบบตรวจสอบการวัดพื้นที่\",\n//       \"SID\": \"6304062620061\",\n//       \"SName\": \"ณัชริกา กันทะสอน\",\n//       \"SID2\": \"6304062620062\",\n//       \"SName2\": \"ใจดี ยืมเงิน\",\n//       \"TID\": \"NLP\",\n//       \"TName\": \"ลือพล ไม่น่ารักเลย\"\n//     },\n//     {\n//       \"ID\": \"002\",\n//       \"Name\": \"ระบบจำลองโมเดล\",\n//       \"SID\": \"6304062620063\",\n//       \"SName\": \"สบายดี สบายใจ\",\n//       \"SID2\": \"6304062620064\",\n//       \"SName2\": \"สุดสวย สุดหล่อ\",\n//       \"TID\": \"SWK\",\n//       \"TName\": \"สุวัชชัย ตัวตึง\"\n//     },\n//     {\n//       \"ID\": \"003\",\n//       \"Name\": \"เว็บไซต์ขายของ\",\n//       \"SID\": \"6304062620065\",\n//       \"SName\": \"ไอ่กล้อง ไอ่อ้วน\",\n//       \"SID2\": \"6304062620066\",\n//       \"SName2\": \"แมวเหมียว น่ารัก\",\n//       \"TID\": \"KAB\",\n//       \"TName\": \"คัณฑารัตน์ สุดละเอียด\"\n//     },\n//     {\n//       \"ID\": \"004\",\n//       \"Name\": \"เว็บไซต์ขายที่ดิน\",\n//       \"SID\": \"6304062620067\",\n//       \"SName\": \"มะหมา สุดหล่อ\",\n//       \"SID2\": \"6304062620068\",\n//       \"SName2\": \"หนูน้อย น่ารัก\",\n//       \"TID\": \"CRL\",\n//       \"TName\": \"เฉียบวุฒิ สุดจ้าบ\"\n\n//     },\n//     {\n//       \"ID\": \"005\",\n//       \"Name\": \"เกมส์ปลูกผัก\",\n//       \"SID\": \"6304062620069\",\n//       \"SName\": \"สวัสดีครับ ผมนวย\",\n//       \"SID2\": \"6304062620070\",\n//       \"SName2\": \"ไม่มี ตังค์ค่า\",\n//       \"TID\": \"ARN\",\n//       \"TName\": \"เอิญ ไม่ใจดี\"\n//     }\n//   ];\n\n//   const [Data3, setData3] = useState([\n//     {\n//       id: 1, name: 'การวิเคราะห์ปัญหา(Problem Analysis)', description: [\n//         '1. มีการระบุที่มาของปัญหา',\n//         '2. มีการนำเสนอข้อมูลทางสถิติหรือหลักฐานเพื่อสนับสนุนความสำคัญของปัญหา',\n//         '3. มีอ้างอิงแหล่งข้อมูลที่น่าเชื่อถือ']\n//       , score: ''\n//     },\n//     {\n//       id: 2, name: 'แนวคิด/ แนวทางของระบบ(Solution)', description: [\n//         '1. มีความสามารถแก้ปัญหาได้แท้จริง ตรงเป้า',\n//         '2. มีวิธีการที่นำเสนอที่มีประสิทธิภาพ',]\n//       , score: ''\n//     },\n//     {\n//       id: 3, name: 'ขอบเขตและปริมาณงาน(Scope)', description: [\n//         '1. มีลักษณะและปริมาณงานเหมาะสมสำหรับปริญญานิพนธ์',\n//         '2. มีความเหมาะสมตามกรอบเวลา']\n//       , score: ''\n//     },\n//     {\n//       id: 4, name: 'ต้นแบบระบบ(System Prototype)', description: [\n//         'มีการนำเสนอต้นแบบระบบด้วยเครื่องมือที่มีความเหมาะสม เช่น Mockup, wireframe, story board และ system architecture',]\n//       , score: ''\n//     },\n//     {\n//       id: 5, name: 'ลักษณะของกลุ่มผู้ใช้งาน(Target market)', description: [\n//         '1. มีการกำหนดเป้าหมายสำหรับการใช้งานระบบอย่างชัดเจน',\n//         '2. มีการศึกษาลักษณะกลุ่มเป้าหมาย',\n//         '3. มีการศึกษาผลกระทบที่คาดว่าจะเกิดต่อกลุ่มเป้าหมาย']\n//       , score: ''\n//     },\n//     {\n//       id: 6, name: 'การวิเคราะห์การตลาด (Market analysis)', description: [\n//         '1. มีการนำเสนอระบบที่ใกล้เคียง/ที่เกี่ยวข้องอย่างน้อย 2 ระบบ',\n//         '2. มีการระบุข้อจำกัดของระบบที่ใกล้เคียงหรือเกี่ยวข้อง',\n//         '3. มีการระบุความแตกต่างหรือจุดเด่นของระบบที่นำเสนอ']\n//       , score: ''\n//     },\n//     {\n//       id: 7, name: 'การศึกษาความเป็นไปได้ (Feasibility study)'\n//       , description: [\n//         '1. มีการนำเสนอการศึกษาเทคนิคที่เกี่ยวข้องเบื้องต้น ',\n//         '2. มีการศึกษาข้อจำกัดของอุปกรณ์/ระบบที่เกี่ยวข้อง']\n//       , score: ''\n//     },\n//     { id: 8, name: 'ผลการประเมิน', score: '' },\n//   ]);\n\n//   const handleCheckboxChange = (id, type) => {\n//     setData3(prevData =>\n//       prevData.map(item =>\n//         item.id === id\n//           ? { ...item, score: type === 'yes' ? 'ผ่าน' : 'ไม่ผ่าน' }\n//           : item\n//       )\n//     );\n//   };\n//   // console.log(Data3);\n//   Data3.forEach(function (element) {\n//     console.log(element.score);\n//   });\n\n//   const updateFinalScore = () => {\n//     const countPass = Data3\n//       .filter(item => item.id >= 1 && item.id <= 7)\n//       .filter(item => item.score === 'ผ่าน').length;\n\n//     const countFail = Data3\n//       .filter(item => item.id >= 1 && item.id <= 7)\n//       .filter(item => item.score === 'ไม่ผ่าน').length;\n\n//     if (countFail >= 4) {\n//       setData3(prevData =>\n//         prevData.map(item =>\n//           item.id === 8\n//             ? { ...item, score: 'ไม่ผ่านการประเมินหัวข้อ' }\n//             : item\n//         )\n//       );\n//     } else if (countPass >= 4) {\n//       setData3(prevData =>\n//         prevData.map(item =>\n//           item.id === 8\n//             ? { ...item, score: 'ผ่านการประเมินหัวข้อ' }\n//             : item\n//         )\n//       );\n//     }\n//   };\n//   useEffect(() => {\n//     updateFinalScore();\n//   }, [Data3]);\n\n//   const saveScore = async () => {\n//     const lastScore = Data3[Data3.length - 1].score;\n//     tableData[selectedRow]?.status === 'CSB01'\n//     // const lastTableData = tableData[tableData.length - 1];\n//     console.log(\"lol\", tableData[tableData.status])\n\n//     try {\n//       const response = await axios.post('http://localhost:9999/Exam_results', {\n//         // Er_name: tableData.status,\n//         Er_results: lastScore,\n//       });\n\n//       if (response.status === 200) {\n//         console.log('Score saved successfully!');\n//       } else {\n//         console.error('Failed to save score');\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   const [openPopup, setOpenPopup] = useState(false);\n//   const [selectedRow, setSelectedRow] = useState(null);\n\n//   const handleLinkClick = (index) => {\n//     setOpenPopup(true);\n//     setSelectedRow(index);\n//   };\n\n//   const handleSavePopup = (e) => {\n//     handleSubmit(e);\n//     setOpenPopup(false);\n//     handleClosePopup();\n//     const updatedData = [...tableData];\n//     updatedData[selectedRow].isRed = false;\n//     updatedData[selectedRow].isDisabled = true;\n//     setTableData(updatedData);\n//     saveScore();\n//   };\n\n//   const handleClosePopup = () => {\n//     setOpenPopup(false);\n//   };\n\n//   const handleRedRow = (index) => {\n//     const updatedData = [...tableData];\n//     updatedData[index].isRed = true;\n//     updatedData[index].isDisabled = true;\n//     setTableData(updatedData);\n//   };\n\n//   const handleDisableRow = (index) => {\n//     const updatedData = [...tableData];\n//     updatedData[index].isDisabled = true;\n//     setTableData(updatedData);\n//   };\n\n//   const handleDonNotGoAny = () => {\n//     const updatedData = tableData.map(row => ({ ...row, isRed: true, isDisabled: true }));\n//     setTableData(updatedData);\n//   };\n\n//   const [ProjectSelect2, setProjectSelect2] = useState('');\n//   const [openDialog, setOpenDialog] = useState(false);\n\n//   const [openDialog2, setOpenDialog2] = useState(false);\n\n//   const handleSubmit2 = (e) => {\n//     e.preventDefault();\n//     // Perform any action with the linkValue, such as redirecting to the provided link\n//     // For example: window.location.href = linkValue;\n//     setOpenDialog2(true);\n//   };\n\n//   // Function to handle closing the dialog\n//   const handleCloseDialog2 = () => {\n//     setOpenDialog2(false);\n//   };\n\n//   // State for form data\n//   const [formData, setFormData] = useState({\n//     Er_name: '',\n//     Er_results: '',\n//     Er_com: '',\n//     Er_status: '',\n//     Er_date: '',\n//     Er_time: ''\n//   });\n\n//   // State for subject names fetched from the database\n//   const [examscores, setExamscores] = useState([]);\n\n//   // State for confirmation dialog\n//   const [open, setOpen] = useState(false);\n\n//   useEffect(() => {\n//     const fetchExamscores = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:9999/Exam_results');\n//         if (response.data && Array.isArray(response.data)) {\n//           setExamscores(response.data.map(item => item.Er_name));\n//         }\n//       } catch (error) {\n//         console.error('Error fetching subject names:', error);\n//       }\n//     };\n\n//     fetchExamscores();\n//   }, []);\n\n//   // Handle form input changes\n//   const handleChange2 = (e) => {\n//     setFormData({ ...formData, [e.target.id]: e.target.value });\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post('http://localhost:9999/Exam_results', formData);\n//       console.log('Subject added:', response.data);\n//       alert(\"Subject added successfully!\");\n//       // Reset form after successful submission\n//       setFormData({\n//         Er_name: '',\n//         Er_results: '',\n//         Er_com: '',\n//         Er_status: '',\n//         Er_date: '',\n//         Er_time: ''\n//       });\n//     } catch (error) {\n//       console.error('Error adding subject:', error);\n//       alert(\"Failed to add subject. Please try again later.\");\n//     }\n//   };\n\n//   const [ProjectSelect, setProjectSelect] = useState({\n//     ID: '',\n//     Name: '',\n//     SID: '',\n//     SName: '',\n//     SID2: '',\n//     SName2: '',\n//     TID: '',\n//     TName: '',\n//   });\n\n//   // Handle change function to update the selected project\n//   const handleChange = (event) => {\n//     const selectedProjectName = event.target.value;\n//     const selectedProject = project.find((proj) => proj.Name === selectedProjectName);\n\n//     // Update the state with the selected project's details\n//     if (selectedProject) {\n//       setProjectSelect(selectedProject);\n//     } else {\n//       setProjectSelect({\n//         ID: '',\n//         Name: '',\n//         SID: '',\n//         SName: '',\n//         SID2: '',\n//         SName2: '',\n//         TID: '',\n//         TName: '',\n//       });\n//     }\n//   };\n\n//   return (\n//     <MainCard>\n//       <Grid container spacing={gridSpacing}>\n//         <Grid item xs={12}>\n//           <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n//             <Grid item>\n//               <Grid container direction=\"column\" spacing={1}></Grid>\n//               <div>\n//                 <h1>ประเมินการสอบโครงงานพิเศษ</h1>\n//                 <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">ไม่เข้าร่วมประเมินทั้งหมด</Button>\n//                 <Dialog open={openPopup} onClose={handleClosePopup} maxWidth='xl' fullWidth>\n//                   <DialogTitle>แบบประเมินการสอบโครงงานพิเศษ</DialogTitle>\n//                   <DialogContent sx={{ minWidth: 1000 }}>\n//                     {selectedRow !== null && (\n//                       <>\n\n//                         {tableData[selectedRow]?.status === 'CSB01' && (\n//                           <>\n//                             <div>\n//                               <Box fontSize=\"18px\" sx={{ marginTop: 5 }}>\n//                                 <h1>แบบประเมินหัวข้อโครงงานพิเศษ</h1>\n//                                 {/* Select field for project name */}\n//                                 <p>เลือกชื่อโครงงาน</p>\n//                                 <FormControl>\n//                                   <InputLabel id=\"ProjectName-select-label\">ชื่อโครงงาน</InputLabel>\n//                                   <Select\n//                                     labelId=\"ProjectName-select-label\"\n//                                     value={ProjectSelect?.Name || \"\"}\n//                                     onChange={handleChange}\n//                                     label=\"ชื่อโครงงาน\"\n//                                     margin=\"normal\"\n//                                     sx={{ minWidth: 250 }}\n//                                   >\n//                                     {project\n//                                       .filter((proj) => proj.ID !== ProjectSelect2.ID) // Adjust filtering if needed\n//                                       .map((proj) => (\n//                                         <MenuItem key={proj.ID} value={proj.Name}>\n//                                           {proj.Name}\n//                                         </MenuItem>\n//                                       ))}\n//                                   </Select>\n//                                 </FormControl>\n//                                 <br />\n\n//                                 {/* Disabled text fields */}\n//                                 <p>โดย</p>\n//                                 <TextField\n//                                   id=\"SID1\"\n//                                   label=\"รหัสนักศึกษาคนที่ 1\"\n//                                   value={ProjectSelect.SID}\n//                                   disabled\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, width: \"25ch\" } }}\n//                                 />\n//                                 <TextField\n//                                   id=\"SName1\"\n//                                   label=\"ชื่อ-สกุลนักศึกษาคนที่ 1\"\n//                                   value={ProjectSelect.SName}\n//                                   disabled\n//                                   sx={{ \"& > :not(style)\": { width: \"30ch\" } }}\n//                                 />\n//                                 <br />\n//                                 <TextField\n//                                   id=\"SID2\"\n//                                   label=\"รหัสนักศึกษาคนที่ 2\"\n//                                   value={ProjectSelect.SID2}\n//                                   disabled\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, mt: 3, width: \"25ch\" } }}\n//                                 />\n//                                 <TextField\n//                                   id=\"SName2\"\n//                                   label=\"ชื่อ-สกุลนักศึกษาคนที่ 2\"\n//                                   value={ProjectSelect.SName2}\n//                                   disabled\n//                                   sx={{ \"& > :not(style)\": { mt: 3, width: \"30ch\" } }}\n//                                 />\n//                                 <p>อาจารย์ที่ปรึกษา</p>\n//                                 <TextField\n//                                   id=\"TName\"\n//                                   label=\"ชื่ออาจารย์ที่ปรึกษา\"\n//                                   value={ProjectSelect.TName}\n//                                   disabled\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, width: \"25ch\" } }}\n//                                 />\n//                               </Box>\n//                               {/* Table for entering scores */}\n//                               <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\n//                               <TableContainer component={Paper}>\n//                                 <Table>\n//                                   <TableHead>\n//                                     <TableRow>\n//                                       <TableCell>ลำดับที่</TableCell>\n//                                       <TableCell>เกณฑ์พิจารณา</TableCell>\n//                                       <TableCell>คำอธิบาย</TableCell>\n//                                       <TableCell>ผลการประเมิน</TableCell>\n//                                     </TableRow>\n//                                   </TableHead>\n//                                   <TableBody>\n//                                     {Data3.map((item, index) => (\n//                                       <TableRow key={item.id}>\n//                                         <TableCell>{item.id}</TableCell>\n//                                         <TableCell>{item.name}</TableCell>\n//                                         <TableCell>\n//                                           <ul>\n//                                             {(item.description || []).map((desc, idx) => (\n//                                               <li key={idx}>{desc}</li>\n//                                             ))}\n//                                           </ul>\n//                                         </TableCell>\n//                                         <TableCell>\n//                                           {item.id === 8 ? (\n//                                             <TextField value={item.score} disabled fullWidth margin=\"none\" />\n//                                           ) : (\n//                                             <div>\n//                                               <label htmlFor={`pass-${index}`}>\n//                                                 <input\n//                                                   type=\"radio\"\n//                                                   id={`pass-${index}`}\n//                                                   checked={item.score === \"ผ่าน\"}\n//                                                   onChange={() => handleCheckboxChange(item.id, \"yes\")}\n//                                                 />\n//                                                 ผ่าน\n//                                               </label>\n//                                               <label htmlFor={`fail-${index}`}>\n//                                                 <input\n//                                                   type=\"radio\"\n//                                                   id={`fail-${index}`}\n//                                                   checked={item.score === \"ไม่ผ่าน\"}\n//                                                   onChange={() => handleCheckboxChange(item.id, \"no\")}\n//                                                 />\n//                                                 ไม่ผ่าน\n//                                               </label>\n//                                             </div>\n//                                           )}\n//                                         </TableCell>\n//                                       </TableRow>\n//                                     ))}\n//                                   </TableBody>\n//                                 </Table>\n//                                 <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n//                                   <DialogTitle>ทำการบันทึกสำเร็จ !!</DialogTitle>\n//                                   <DialogContent>\n//                                     <p>รอการตรวจสอบจากเจ้าหน้าที่</p>\n//                                   </DialogContent>\n//                                   <DialogActions>\n//                                     <Button onClick={() => setOpenDialog(false)}>Close</Button>\n//                                   </DialogActions>\n//                                 </Dialog>\n//                               </TableContainer>\n//                               <Stack alignItems=\"center\" justifyContent=\"center\" fontSize=\"18px\" sx={{ marginTop: 3 }} />\n//                             </div>\n//                           </>\n//                         )}\n\n//                       </>\n//                     )}\n//                   </DialogContent>\n//                   <DialogActions>\n//                     <Button onClick={handleSavePopup} color=\"primary\">Save</Button>\n//                     <Button onClick={handleClosePopup} color=\"secondary\">Cancel</Button>\n//                   </DialogActions>\n//                 </Dialog>\n//                 <TableContainer>\n//                   <Table>\n//                     <TableHead>\n//                       <TableRow>\n//                         <TableCell>ลำดับที่</TableCell>\n//                         <TableCell>ชื่อโครงงาน</TableCell>\n//                         <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\n//                         <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\n//                         <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\n//                         <TableCell>Status</TableCell>\n//                       </TableRow>\n//                     </TableHead>\n//                     <TableBody>\n//                       {tableData.map((row, index) => (\n//                         <TableRow key={index} style={{ backgroundColor: row.isRed ? 'lightcoral' : row.isDisabled ? 'lightgrey' : 'inherit' }}>\n//                           <TableCell>{row.id}</TableCell>\n//                           <TableCell>{row.name}</TableCell>\n//                           <TableCell>\n//                             <Button onClick={() => handleLinkClick(index)} variant=\"outlined\" disabled={row.isDisabled}>ประเมิน</Button>\n//                           </TableCell>\n//                           <TableCell>\n//                             <Button onClick={() => handleDisableRow(index)} variant=\"outlined\" disabled={row.isDisabled || row.isRed}>ไม่ประสงค์ลงคะแนน</Button>\n//                           </TableCell>\n//                           <TableCell>\n//                             <Button onClick={() => handleRedRow(index)} variant=\"outlined\" disabled={row.isDisabled || row.isRed}>ไม่เข้าร่วมประเมิน</Button>\n//                           </TableCell>\n//                           <TableCell>{row.status}</TableCell>\n//                         </TableRow>\n//                       ))}\n//                     </TableBody>\n//                   </Table>\n//                 </TableContainer>\n//               </div>\n//             </Grid>\n//           </Grid>\n//         </Grid>\n//       </Grid>\n//     </MainCard>\n//   );\n// }\n\n// export default InputScoreCSB01;","map":{"version":3,"names":[],"sources":["C:/test/create-react-app/src/views/utilities/InputScoreCSB01.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Table, Checkbox, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\r\n// import Select from '@mui/material/Select';\r\n// import MenuItem from '@mui/material/MenuItem';\r\n// import TextField from '@mui/material/TextField';\r\n// import Box from '@mui/material/Box';\r\n// import Paper from '@mui/material/Paper';\r\n// import { Stack } from '@mui/system';\r\n// import InputLabel from '@mui/material/InputLabel';\r\n// import FormControl from '@mui/material/FormControl';\r\n// import axios from 'axios';\r\n// import { Grid } from '@mui/material';\r\n// import MainCard from 'ui-component/cards/MainCard';\r\n// import { gridSpacing } from 'store/constant';\r\n\r\n\r\n// function InputScoreCSB01() {\r\n//   const [tableData, setTableData] = useState([\r\n//     { id: 1, name: 'จัดการการสอบโครงงานพิเศษ', link: 'path/to/file1.txt', status: 'CSB01', isDisabled: false, isRed: false },\r\n\r\n//   ]);\r\n\r\n//   const project = [\r\n//     {\r\n//       \"ID\": \"001\",\r\n//       \"Name\": \"ระบบตรวจสอบการวัดพื้นที่\",\r\n//       \"SID\": \"6304062620061\",\r\n//       \"SName\": \"ณัชริกา กันทะสอน\",\r\n//       \"SID2\": \"6304062620062\",\r\n//       \"SName2\": \"ใจดี ยืมเงิน\",\r\n//       \"TID\": \"NLP\",\r\n//       \"TName\": \"ลือพล ไม่น่ารักเลย\"\r\n//     },\r\n//     {\r\n//       \"ID\": \"002\",\r\n//       \"Name\": \"ระบบจำลองโมเดล\",\r\n//       \"SID\": \"6304062620063\",\r\n//       \"SName\": \"สบายดี สบายใจ\",\r\n//       \"SID2\": \"6304062620064\",\r\n//       \"SName2\": \"สุดสวย สุดหล่อ\",\r\n//       \"TID\": \"SWK\",\r\n//       \"TName\": \"สุวัชชัย ตัวตึง\"\r\n//     },\r\n//     {\r\n//       \"ID\": \"003\",\r\n//       \"Name\": \"เว็บไซต์ขายของ\",\r\n//       \"SID\": \"6304062620065\",\r\n//       \"SName\": \"ไอ่กล้อง ไอ่อ้วน\",\r\n//       \"SID2\": \"6304062620066\",\r\n//       \"SName2\": \"แมวเหมียว น่ารัก\",\r\n//       \"TID\": \"KAB\",\r\n//       \"TName\": \"คัณฑารัตน์ สุดละเอียด\"\r\n//     },\r\n//     {\r\n//       \"ID\": \"004\",\r\n//       \"Name\": \"เว็บไซต์ขายที่ดิน\",\r\n//       \"SID\": \"6304062620067\",\r\n//       \"SName\": \"มะหมา สุดหล่อ\",\r\n//       \"SID2\": \"6304062620068\",\r\n//       \"SName2\": \"หนูน้อย น่ารัก\",\r\n//       \"TID\": \"CRL\",\r\n//       \"TName\": \"เฉียบวุฒิ สุดจ้าบ\"\r\n\r\n//     },\r\n//     {\r\n//       \"ID\": \"005\",\r\n//       \"Name\": \"เกมส์ปลูกผัก\",\r\n//       \"SID\": \"6304062620069\",\r\n//       \"SName\": \"สวัสดีครับ ผมนวย\",\r\n//       \"SID2\": \"6304062620070\",\r\n//       \"SName2\": \"ไม่มี ตังค์ค่า\",\r\n//       \"TID\": \"ARN\",\r\n//       \"TName\": \"เอิญ ไม่ใจดี\"\r\n//     }\r\n//   ];\r\n\r\n//   const [Data3, setData3] = useState([\r\n//     {\r\n//       id: 1, name: 'การวิเคราะห์ปัญหา(Problem Analysis)', description: [\r\n//         '1. มีการระบุที่มาของปัญหา',\r\n//         '2. มีการนำเสนอข้อมูลทางสถิติหรือหลักฐานเพื่อสนับสนุนความสำคัญของปัญหา',\r\n//         '3. มีอ้างอิงแหล่งข้อมูลที่น่าเชื่อถือ']\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 2, name: 'แนวคิด/ แนวทางของระบบ(Solution)', description: [\r\n//         '1. มีความสามารถแก้ปัญหาได้แท้จริง ตรงเป้า',\r\n//         '2. มีวิธีการที่นำเสนอที่มีประสิทธิภาพ',]\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 3, name: 'ขอบเขตและปริมาณงาน(Scope)', description: [\r\n//         '1. มีลักษณะและปริมาณงานเหมาะสมสำหรับปริญญานิพนธ์',\r\n//         '2. มีความเหมาะสมตามกรอบเวลา']\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 4, name: 'ต้นแบบระบบ(System Prototype)', description: [\r\n//         'มีการนำเสนอต้นแบบระบบด้วยเครื่องมือที่มีความเหมาะสม เช่น Mockup, wireframe, story board และ system architecture',]\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 5, name: 'ลักษณะของกลุ่มผู้ใช้งาน(Target market)', description: [\r\n//         '1. มีการกำหนดเป้าหมายสำหรับการใช้งานระบบอย่างชัดเจน',\r\n//         '2. มีการศึกษาลักษณะกลุ่มเป้าหมาย',\r\n//         '3. มีการศึกษาผลกระทบที่คาดว่าจะเกิดต่อกลุ่มเป้าหมาย']\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 6, name: 'การวิเคราะห์การตลาด (Market analysis)', description: [\r\n//         '1. มีการนำเสนอระบบที่ใกล้เคียง/ที่เกี่ยวข้องอย่างน้อย 2 ระบบ',\r\n//         '2. มีการระบุข้อจำกัดของระบบที่ใกล้เคียงหรือเกี่ยวข้อง',\r\n//         '3. มีการระบุความแตกต่างหรือจุดเด่นของระบบที่นำเสนอ']\r\n//       , score: ''\r\n//     },\r\n//     {\r\n//       id: 7, name: 'การศึกษาความเป็นไปได้ (Feasibility study)'\r\n//       , description: [\r\n//         '1. มีการนำเสนอการศึกษาเทคนิคที่เกี่ยวข้องเบื้องต้น ',\r\n//         '2. มีการศึกษาข้อจำกัดของอุปกรณ์/ระบบที่เกี่ยวข้อง']\r\n//       , score: ''\r\n//     },\r\n//     { id: 8, name: 'ผลการประเมิน', score: '' },\r\n//   ]);\r\n\r\n\r\n//   const handleCheckboxChange = (id, type) => {\r\n//     setData3(prevData =>\r\n//       prevData.map(item =>\r\n//         item.id === id\r\n//           ? { ...item, score: type === 'yes' ? 'ผ่าน' : 'ไม่ผ่าน' }\r\n//           : item\r\n//       )\r\n//     );\r\n//   };\r\n//   // console.log(Data3);\r\n//   Data3.forEach(function (element) {\r\n//     console.log(element.score);\r\n//   });\r\n\r\n//   const updateFinalScore = () => {\r\n//     const countPass = Data3\r\n//       .filter(item => item.id >= 1 && item.id <= 7)\r\n//       .filter(item => item.score === 'ผ่าน').length;\r\n\r\n//     const countFail = Data3\r\n//       .filter(item => item.id >= 1 && item.id <= 7)\r\n//       .filter(item => item.score === 'ไม่ผ่าน').length;\r\n\r\n//     if (countFail >= 4) {\r\n//       setData3(prevData =>\r\n//         prevData.map(item =>\r\n//           item.id === 8\r\n//             ? { ...item, score: 'ไม่ผ่านการประเมินหัวข้อ' }\r\n//             : item\r\n//         )\r\n//       );\r\n//     } else if (countPass >= 4) {\r\n//       setData3(prevData =>\r\n//         prevData.map(item =>\r\n//           item.id === 8\r\n//             ? { ...item, score: 'ผ่านการประเมินหัวข้อ' }\r\n//             : item\r\n//         )\r\n//       );\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     updateFinalScore();\r\n//   }, [Data3]);\r\n\r\n//   const saveScore = async () => {\r\n//     const lastScore = Data3[Data3.length - 1].score;\r\n//     tableData[selectedRow]?.status === 'CSB01'\r\n//     // const lastTableData = tableData[tableData.length - 1];\r\n//     console.log(\"lol\", tableData[tableData.status])\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:9999/Exam_results', {\r\n//         // Er_name: tableData.status,\r\n//         Er_results: lastScore,\r\n//       });\r\n\r\n//       if (response.status === 200) {\r\n//         console.log('Score saved successfully!');\r\n//       } else {\r\n//         console.error('Failed to save score');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   const [openPopup, setOpenPopup] = useState(false);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n\r\n//   const handleLinkClick = (index) => {\r\n//     setOpenPopup(true);\r\n//     setSelectedRow(index);\r\n//   };\r\n\r\n//   const handleSavePopup = (e) => {\r\n//     handleSubmit(e);\r\n//     setOpenPopup(false);\r\n//     handleClosePopup();\r\n//     const updatedData = [...tableData];\r\n//     updatedData[selectedRow].isRed = false;\r\n//     updatedData[selectedRow].isDisabled = true;\r\n//     setTableData(updatedData);\r\n//     saveScore();\r\n//   };\r\n\r\n//   const handleClosePopup = () => {\r\n//     setOpenPopup(false);\r\n//   };\r\n\r\n//   const handleRedRow = (index) => {\r\n//     const updatedData = [...tableData];\r\n//     updatedData[index].isRed = true;\r\n//     updatedData[index].isDisabled = true;\r\n//     setTableData(updatedData);\r\n//   };\r\n\r\n//   const handleDisableRow = (index) => {\r\n//     const updatedData = [...tableData];\r\n//     updatedData[index].isDisabled = true;\r\n//     setTableData(updatedData);\r\n//   };\r\n\r\n//   const handleDonNotGoAny = () => {\r\n//     const updatedData = tableData.map(row => ({ ...row, isRed: true, isDisabled: true }));\r\n//     setTableData(updatedData);\r\n//   };\r\n\r\n//   const [ProjectSelect2, setProjectSelect2] = useState('');\r\n//   const [openDialog, setOpenDialog] = useState(false);\r\n\r\n//   const [openDialog2, setOpenDialog2] = useState(false);\r\n\r\n//   const handleSubmit2 = (e) => {\r\n//     e.preventDefault();\r\n//     // Perform any action with the linkValue, such as redirecting to the provided link\r\n//     // For example: window.location.href = linkValue;\r\n//     setOpenDialog2(true);\r\n//   };\r\n\r\n//   // Function to handle closing the dialog\r\n//   const handleCloseDialog2 = () => {\r\n//     setOpenDialog2(false);\r\n//   };\r\n\r\n//   // State for form data\r\n//   const [formData, setFormData] = useState({\r\n//     Er_name: '',\r\n//     Er_results: '',\r\n//     Er_com: '',\r\n//     Er_status: '',\r\n//     Er_date: '',\r\n//     Er_time: ''\r\n//   });\r\n\r\n//   // State for subject names fetched from the database\r\n//   const [examscores, setExamscores] = useState([]);\r\n\r\n//   // State for confirmation dialog\r\n//   const [open, setOpen] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const fetchExamscores = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:9999/Exam_results');\r\n//         if (response.data && Array.isArray(response.data)) {\r\n//           setExamscores(response.data.map(item => item.Er_name));\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching subject names:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchExamscores();\r\n//   }, []);\r\n\r\n//   // Handle form input changes\r\n//   const handleChange2 = (e) => {\r\n//     setFormData({ ...formData, [e.target.id]: e.target.value });\r\n//   };\r\n\r\n//   // Handle form submission\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await axios.post('http://localhost:9999/Exam_results', formData);\r\n//       console.log('Subject added:', response.data);\r\n//       alert(\"Subject added successfully!\");\r\n//       // Reset form after successful submission\r\n//       setFormData({\r\n//         Er_name: '',\r\n//         Er_results: '',\r\n//         Er_com: '',\r\n//         Er_status: '',\r\n//         Er_date: '',\r\n//         Er_time: ''\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error adding subject:', error);\r\n//       alert(\"Failed to add subject. Please try again later.\");\r\n//     }\r\n//   };\r\n\r\n//   const [ProjectSelect, setProjectSelect] = useState({\r\n//     ID: '',\r\n//     Name: '',\r\n//     SID: '',\r\n//     SName: '',\r\n//     SID2: '',\r\n//     SName2: '',\r\n//     TID: '',\r\n//     TName: '',\r\n//   });\r\n\r\n//   // Handle change function to update the selected project\r\n//   const handleChange = (event) => {\r\n//     const selectedProjectName = event.target.value;\r\n//     const selectedProject = project.find((proj) => proj.Name === selectedProjectName);\r\n\r\n//     // Update the state with the selected project's details\r\n//     if (selectedProject) {\r\n//       setProjectSelect(selectedProject);\r\n//     } else {\r\n//       setProjectSelect({\r\n//         ID: '',\r\n//         Name: '',\r\n//         SID: '',\r\n//         SName: '',\r\n//         SID2: '',\r\n//         SName2: '',\r\n//         TID: '',\r\n//         TName: '',\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <MainCard>\r\n//       <Grid container spacing={gridSpacing}>\r\n//         <Grid item xs={12}>\r\n//           <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n//             <Grid item>\r\n//               <Grid container direction=\"column\" spacing={1}></Grid>\r\n//               <div>\r\n//                 <h1>ประเมินการสอบโครงงานพิเศษ</h1>\r\n//                 <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">ไม่เข้าร่วมประเมินทั้งหมด</Button>\r\n//                 <Dialog open={openPopup} onClose={handleClosePopup} maxWidth='xl' fullWidth>\r\n//                   <DialogTitle>แบบประเมินการสอบโครงงานพิเศษ</DialogTitle>\r\n//                   <DialogContent sx={{ minWidth: 1000 }}>\r\n//                     {selectedRow !== null && (\r\n//                       <>\r\n\r\n\r\n//                         {tableData[selectedRow]?.status === 'CSB01' && (\r\n//                           <>\r\n//                             <div>\r\n//                               <Box fontSize=\"18px\" sx={{ marginTop: 5 }}>\r\n//                                 <h1>แบบประเมินหัวข้อโครงงานพิเศษ</h1>\r\n//                                 {/* Select field for project name */}\r\n//                                 <p>เลือกชื่อโครงงาน</p>\r\n//                                 <FormControl>\r\n//                                   <InputLabel id=\"ProjectName-select-label\">ชื่อโครงงาน</InputLabel>\r\n//                                   <Select\r\n//                                     labelId=\"ProjectName-select-label\"\r\n//                                     value={ProjectSelect?.Name || \"\"}\r\n//                                     onChange={handleChange}\r\n//                                     label=\"ชื่อโครงงาน\"\r\n//                                     margin=\"normal\"\r\n//                                     sx={{ minWidth: 250 }}\r\n//                                   >\r\n//                                     {project\r\n//                                       .filter((proj) => proj.ID !== ProjectSelect2.ID) // Adjust filtering if needed\r\n//                                       .map((proj) => (\r\n//                                         <MenuItem key={proj.ID} value={proj.Name}>\r\n//                                           {proj.Name}\r\n//                                         </MenuItem>\r\n//                                       ))}\r\n//                                   </Select>\r\n//                                 </FormControl>\r\n//                                 <br />\r\n\r\n//                                 {/* Disabled text fields */}\r\n//                                 <p>โดย</p>\r\n//                                 <TextField\r\n//                                   id=\"SID1\"\r\n//                                   label=\"รหัสนักศึกษาคนที่ 1\"\r\n//                                   value={ProjectSelect.SID}\r\n//                                   disabled\r\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, width: \"25ch\" } }}\r\n//                                 />\r\n//                                 <TextField\r\n//                                   id=\"SName1\"\r\n//                                   label=\"ชื่อ-สกุลนักศึกษาคนที่ 1\"\r\n//                                   value={ProjectSelect.SName}\r\n//                                   disabled\r\n//                                   sx={{ \"& > :not(style)\": { width: \"30ch\" } }}\r\n//                                 />\r\n//                                 <br />\r\n//                                 <TextField\r\n//                                   id=\"SID2\"\r\n//                                   label=\"รหัสนักศึกษาคนที่ 2\"\r\n//                                   value={ProjectSelect.SID2}\r\n//                                   disabled\r\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, mt: 3, width: \"25ch\" } }}\r\n//                                 />\r\n//                                 <TextField\r\n//                                   id=\"SName2\"\r\n//                                   label=\"ชื่อ-สกุลนักศึกษาคนที่ 2\"\r\n//                                   value={ProjectSelect.SName2}\r\n//                                   disabled\r\n//                                   sx={{ \"& > :not(style)\": { mt: 3, width: \"30ch\" } }}\r\n//                                 />\r\n//                                 <p>อาจารย์ที่ปรึกษา</p>\r\n//                                 <TextField\r\n//                                   id=\"TName\"\r\n//                                   label=\"ชื่ออาจารย์ที่ปรึกษา\"\r\n//                                   value={ProjectSelect.TName}\r\n//                                   disabled\r\n//                                   sx={{ \"& > :not(style)\": { mr: 5, ml: 5, width: \"25ch\" } }}\r\n//                                 />\r\n//                               </Box>\r\n//                               {/* Table for entering scores */}\r\n//                               <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\r\n//                               <TableContainer component={Paper}>\r\n//                                 <Table>\r\n//                                   <TableHead>\r\n//                                     <TableRow>\r\n//                                       <TableCell>ลำดับที่</TableCell>\r\n//                                       <TableCell>เกณฑ์พิจารณา</TableCell>\r\n//                                       <TableCell>คำอธิบาย</TableCell>\r\n//                                       <TableCell>ผลการประเมิน</TableCell>\r\n//                                     </TableRow>\r\n//                                   </TableHead>\r\n//                                   <TableBody>\r\n//                                     {Data3.map((item, index) => (\r\n//                                       <TableRow key={item.id}>\r\n//                                         <TableCell>{item.id}</TableCell>\r\n//                                         <TableCell>{item.name}</TableCell>\r\n//                                         <TableCell>\r\n//                                           <ul>\r\n//                                             {(item.description || []).map((desc, idx) => (\r\n//                                               <li key={idx}>{desc}</li>\r\n//                                             ))}\r\n//                                           </ul>\r\n//                                         </TableCell>\r\n//                                         <TableCell>\r\n//                                           {item.id === 8 ? (\r\n//                                             <TextField value={item.score} disabled fullWidth margin=\"none\" />\r\n//                                           ) : (\r\n//                                             <div>\r\n//                                               <label htmlFor={`pass-${index}`}>\r\n//                                                 <input\r\n//                                                   type=\"radio\"\r\n//                                                   id={`pass-${index}`}\r\n//                                                   checked={item.score === \"ผ่าน\"}\r\n//                                                   onChange={() => handleCheckboxChange(item.id, \"yes\")}\r\n//                                                 />\r\n//                                                 ผ่าน\r\n//                                               </label>\r\n//                                               <label htmlFor={`fail-${index}`}>\r\n//                                                 <input\r\n//                                                   type=\"radio\"\r\n//                                                   id={`fail-${index}`}\r\n//                                                   checked={item.score === \"ไม่ผ่าน\"}\r\n//                                                   onChange={() => handleCheckboxChange(item.id, \"no\")}\r\n//                                                 />\r\n//                                                 ไม่ผ่าน\r\n//                                               </label>\r\n//                                             </div>\r\n//                                           )}\r\n//                                         </TableCell>\r\n//                                       </TableRow>\r\n//                                     ))}\r\n//                                   </TableBody>\r\n//                                 </Table>\r\n//                                 <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n//                                   <DialogTitle>ทำการบันทึกสำเร็จ !!</DialogTitle>\r\n//                                   <DialogContent>\r\n//                                     <p>รอการตรวจสอบจากเจ้าหน้าที่</p>\r\n//                                   </DialogContent>\r\n//                                   <DialogActions>\r\n//                                     <Button onClick={() => setOpenDialog(false)}>Close</Button>\r\n//                                   </DialogActions>\r\n//                                 </Dialog>\r\n//                               </TableContainer>\r\n//                               <Stack alignItems=\"center\" justifyContent=\"center\" fontSize=\"18px\" sx={{ marginTop: 3 }} />\r\n//                             </div>\r\n//                           </>\r\n//                         )}\r\n\r\n//                       </>\r\n//                     )}\r\n//                   </DialogContent>\r\n//                   <DialogActions>\r\n//                     <Button onClick={handleSavePopup} color=\"primary\">Save</Button>\r\n//                     <Button onClick={handleClosePopup} color=\"secondary\">Cancel</Button>\r\n//                   </DialogActions>\r\n//                 </Dialog>\r\n//                 <TableContainer>\r\n//                   <Table>\r\n//                     <TableHead>\r\n//                       <TableRow>\r\n//                         <TableCell>ลำดับที่</TableCell>\r\n//                         <TableCell>ชื่อโครงงาน</TableCell>\r\n//                         <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\r\n//                         <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\r\n//                         <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\r\n//                         <TableCell>Status</TableCell>\r\n//                       </TableRow>\r\n//                     </TableHead>\r\n//                     <TableBody>\r\n//                       {tableData.map((row, index) => (\r\n//                         <TableRow key={index} style={{ backgroundColor: row.isRed ? 'lightcoral' : row.isDisabled ? 'lightgrey' : 'inherit' }}>\r\n//                           <TableCell>{row.id}</TableCell>\r\n//                           <TableCell>{row.name}</TableCell>\r\n//                           <TableCell>\r\n//                             <Button onClick={() => handleLinkClick(index)} variant=\"outlined\" disabled={row.isDisabled}>ประเมิน</Button>\r\n//                           </TableCell>\r\n//                           <TableCell>\r\n//                             <Button onClick={() => handleDisableRow(index)} variant=\"outlined\" disabled={row.isDisabled || row.isRed}>ไม่ประสงค์ลงคะแนน</Button>\r\n//                           </TableCell>\r\n//                           <TableCell>\r\n//                             <Button onClick={() => handleRedRow(index)} variant=\"outlined\" disabled={row.isDisabled || row.isRed}>ไม่เข้าร่วมประเมิน</Button>\r\n//                           </TableCell>\r\n//                           <TableCell>{row.status}</TableCell>\r\n//                         </TableRow>\r\n//                       ))}\r\n//                     </TableBody>\r\n//                   </Table>\r\n//                 </TableContainer>\r\n//               </div>\r\n//             </Grid>\r\n//           </Grid>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </MainCard>\r\n//   );\r\n// }\r\n\r\n// export default InputScoreCSB01;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}