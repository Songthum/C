{"ast":null,"code":"var _jsxFileName = \"C:\\\\CSB-haha\\\\create-react-app\\\\src\\\\views\\\\pages\\\\authentication\\\\auth-forms\\\\AuthLogin.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import { useTheme } from '@mui/material/styles';\n// import {\n//   Box,\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   IconButton,\n//   InputAdornment,\n//   InputLabel,\n//   OutlinedInput,\n//   Typography\n// } from '@mui/material';\n// import * as Yup from 'yup';\n// import { Formik } from 'formik';\n// import useScriptRef from 'hooks/useScriptRef';\n// import AnimateButton from 'ui-component/extended/AnimateButton';\n// import Visibility from '@mui/icons-material/Visibility';\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\n// import axios from 'axios';\n\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\n//   const theme = useTheme();\n//   const scriptedRef = useScriptRef();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword((prev) => !prev);\n//   };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\n//     try {\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\n//         username: values.username,\n//         password: values.password,\n//       });\n\n//       if (response && response.data) {\n//         const { api_status, api_message, userInfo } = response.data;\n\n//         if (api_status === \"success\") {\n//           console.log(\"Login successful:\", userInfo);\n\n//           //\n//           const payload = {\n//             S_id: userInfo.username,\n//             S_name: userInfo.displayname,\n//             st_firstname_en: userInfo.firstname_en,\n//             st_lastname_en: userInfo.lastname_en,\n//             st_email: userInfo.email,\n//             st_account_type: userInfo.account_type,\n//             st_status: true,\n//           };\n\n//           //รอแก้\n\n//           await axios.post(\"http://localhost:9999/students\", payload);\n//           // Redirect to the specified URL\n//           window.location.href = \"http://localhost:3000/free/studen/\";\n\n//           // Optional: Call onLoginSuccess if you still want to execute it\n//           if (typeof onLoginSuccess === 'function') {\n//             onLoginSuccess(); \n//           }\n//         } else if {\n\n//         }\n\n//         else {\n//           setError(api_message);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Error logging in:\", error);\n//       setErrors({ submit: \"Invalid username or password\" });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\n//           <Box sx={{ mb: 2 }}>\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       <Formik\n//         initialValues={{\n//           username: '', // Change email to username\n//           password: '',\n//           submit: null\n//         }}\n//         validationSchema={Yup.object().shape({\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\n//           password: Yup.string().max(255).required('Password is required')\n//         })}\n//         onSubmit={onSubmit}\n//       >\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//           <form noValidate onSubmit={handleSubmit} {...others}>\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\n//               <OutlinedInput\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\n//                 value={values.username} // Change value to username\n//                 name=\"username\" // Change name to username\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 label=\"Username\"\n//               />\n//               {touched.username && errors.username && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\n//                   {errors.username}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-password-login\"\n//                 type={showPassword ? 'text' : 'password'}\n//                 value={values.password}\n//                 name=\"password\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       aria-label=\"toggle password visibility\"\n//                       onClick={handleClickShowPassword}\n//                       onMouseDown={handleMouseDownPassword}\n//                       edge=\"end\"\n//                       size=\"large\"\n//                     >\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//                 label=\"Password\"\n//               />\n//               {touched.password && errors.password && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n//                   {errors.password}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             {errors.submit && (\n//               <Box sx={{ mt: 3 }}>\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\n//               </Box>\n//             )}\n\n//             <Box sx={{ mt: 2 }}>\n//               <AnimateButton>\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n//                   Sign in\n//                 </Button>\n//               </AnimateButton>\n//             </Box>\n//             <Typography\n//               component=\"a\"\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\n//               target=\"_blank\"\n//               rel=\"noopener noreferrer\"\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\n//             >\n//               Forgot ICIT Account Password\n//             </Typography>\n//           </form>\n//         )}\n//       </Formik>\n//     </>\n//   );\n// };\n\n// export default FirebaseLogin;\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n// // import { Typography, Button, Box, TextField } from '@mui/material';\n\n// // const FirebaseLogin = ({ onLoginSuccess }) => {\n// //     const [username, setUsername] = useState(\"\");\n// //     const [password, setPassword] = useState(\"\");\n// //     const [error, setError] = useState(\"\");\n\n// //     const onSubmit = async (e) => {\n// //         e.preventDefault();\n// //         try {\n// //             const response = await axios.post(\"http://localhost:9999/auth/login\", {\n// //                 username,\n// //                 password,\n// //             });\n\n// //             if (response && response.data) {\n// //                 const { api_status, api_message, userInfo } = response.data;\n\n// //                 if (api_status === \"success\") {\n// //                     console.log(\"Login successful:\", userInfo);\n\n// //                     // Call the onLoginSuccess prop to navigate\n// //                     onLoginSuccess(); // This line calls the function passed from App component\n// //                 } else {\n// //                     setError(api_message);\n// //                 }\n// //             }\n// //         } catch (error) {\n// //             console.error(\"Error logging in:\", error);\n// //             setError(\"Invalid username or password\");\n// //         }\n// //     };\n\n// //     return (\n// //         <Box\n// //             sx={{\n// //                 display: 'flex',\n// //                 flexDirection: 'column',\n// //                 alignItems: 'center',\n// //                 justifyContent: 'center',\n// //                 height: '100vh',\n// //                 backgroundColor: '#f5f5f5',\n// //             }}\n// //         >\n// //             <Box\n// //                 sx={{\n// //                     width: 300,\n// //                     padding: 3,\n// //                     backgroundColor: 'white',\n// //                     borderRadius: 2,\n// //                     boxShadow: 3,\n// //                 }}\n// //             >\n// //                 <Typography variant=\"h5\" gutterBottom align=\"center\">\n// //                     Login\n// //                 </Typography>\n// //                 <form onSubmit={onSubmit}>\n// //                     <TextField\n// //                         fullWidth\n// //                         label=\"ICIT Account\"\n// //                         variant=\"outlined\"\n// //                         margin=\"normal\"\n// //                         value={username}\n// //                         onChange={(e) => setUsername(e.target.value)}\n// //                     />\n// //                     <TextField\n// //                         fullWidth\n// //                         label=\"Password\"\n// //                         variant=\"outlined\"\n// //                         margin=\"normal\"\n// //                         type=\"password\"\n// //                         value={password}\n// //                         onChange={(e) => setPassword(e.target.value)}\n// //                     />\n// //                     <Button\n// //                         fullWidth\n// //                         type=\"submit\"\n// //                         variant=\"contained\"\n// //                         color=\"primary\"\n// //                         sx={{ mt: 2 }}\n// //                     >\n// //                         Sign in\n// //                     </Button>\n// //                     {error && <Typography sx={{ mt: 2, color: 'red' }}>{error}</Typography>}\n// //                 </form>\n// //             </Box>\n// //         </Box>\n// //     );\n// // };\n\n// // export default FirebaseLogin;\n\n// import { useState } from 'react';\n// import { useTheme } from '@mui/material/styles';\n// import {\n//   Box,\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   IconButton,\n//   InputAdornment,\n//   InputLabel,\n//   OutlinedInput,\n//   Typography\n// } from '@mui/material';\n// import * as Yup from 'yup';\n// import { Formik } from 'formik';\n// import useScriptRef from 'hooks/useScriptRef';\n// import AnimateButton from 'ui-component/extended/AnimateButton';\n// import Visibility from '@mui/icons-material/Visibility';\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\n// import axios from 'axios';\n\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\n//   const theme = useTheme();\n//   const scriptedRef = useScriptRef();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword((prev) => !prev);\n//   };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\n//     try {\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\n//         username: values.username,\n//         password: values.password,\n//       });\n\n//       if (response && response.data) {\n//         const { api_status, api_message, userInfo } = response.data;\n\n//         if (api_status === \"success\") {\n//           console.log(\"Login successful:\", userInfo);\n\n//           // เก็บ username ใน Local Storage\n//           localStorage.setItem(\"username\", values.username);\n\n//           // Redirect to the specified URL\n//           window.location.href = \"http://localhost:3000/free/studen/\";\n\n//           // Optional: Call onLoginSuccess if you still want to execute it\n//           if (typeof onLoginSuccess === 'function') {\n//             onLoginSuccess();\n//           }\n//         } else {\n//           setError(api_message);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Error logging in:\", error);\n//       setErrors({ submit: \"Invalid username or password\" });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\n//           <Box sx={{ mb: 2 }}>\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       <Formik\n//         initialValues={{\n//           username: '', // Change email to username\n//           password: '',\n//           submit: null\n//         }}\n//         validationSchema={Yup.object().shape({\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\n//           password: Yup.string().max(255).required('Password is required')\n//         })}\n//         onSubmit={onSubmit}\n//       >\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//           <form noValidate onSubmit={handleSubmit} {...others}>\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\n//               <OutlinedInput\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\n//                 value={values.username} // Change value to username\n//                 name=\"username\" // Change name to username\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 label=\"Username\"\n//               />\n//               {touched.username && errors.username && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\n//                   {errors.username}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-password-login\"\n//                 type={showPassword ? 'text' : 'password'}\n//                 value={values.password}\n//                 name=\"password\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       aria-label=\"toggle password visibility\"\n//                       onClick={handleClickShowPassword}\n//                       onMouseDown={handleMouseDownPassword}\n//                       edge=\"end\"\n//                       size=\"large\"\n//                     >\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//                 label=\"Password\"\n//               />\n//               {touched.password && errors.password && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n//                   {errors.password}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             {errors.submit && (\n//               <Box sx={{ mt: 3 }}>\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\n//               </Box>\n//             )}\n\n//             <Box sx={{ mt: 2 }}>\n//               <AnimateButton>\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n//                   Sign in\n//                 </Button>\n//               </AnimateButton>\n//             </Box>\n//             <Typography\n//               component=\"a\"\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\n//               target=\"_blank\"\n//               rel=\"noopener noreferrer\"\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\n//             >\n//               Forgot ICIT Account Password\n//             </Typography>\n//           </form>\n//         )}\n//       </Formik>\n//     </>\n//   );\n// };\n\n// export default FirebaseLogin;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { TextField, Button, Typography, Link, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FirebaseLogin = ({\n  onLogin\n}) => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const onSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:9999/auth/login\", {\n        username,\n        password\n      });\n      if (response && response.data) {\n        const {\n          api_status,\n          api_message,\n          userInfo\n        } = response.data;\n        if (api_status === \"success\") {\n          console.log(\"Login successful:\", userInfo);\n          if (userInfo.account_type === \"students\") {\n            const studentPayload = {\n              S_id: userInfo.username,\n              S_name: userInfo.displayname,\n              st_firstname_en: userInfo.firstname_en,\n              st_lastname_en: userInfo.lastname_en,\n              st_email: userInfo.email,\n              st_account_type: userInfo.account_type,\n              st_status: true\n            };\n            await axios.post(\"http://localhost:9999/students\", studentPayload);\n            localStorage.setItem(\"S_id\", userInfo.username);\n          } else if (userInfo.account_type === \"admin\") {\n            const AdminPayload = {\n              A_id: userInfo.username,\n              A_name: userInfo.displayname\n            };\n            await axios.post(\"http://localhost:9999/admins\", AdminPayload);\n            localStorage.setItem(\"A_id\", userInfo.username);\n          } else if (userInfo.account_type === \"teachers\") {\n            const TeacherPayload = {\n              T_id: userInfo.username,\n              T_name: userInfo.displayname\n            };\n            await axios.post(\"http://localhost:9999/teachers\", TeacherPayload);\n            localStorage.setItem(\"T_id\", userInfo.username);\n          }\n\n          // Notify the parent component of login and pass account type\n          onLogin(true, userInfo.account_type);\n        } else {\n          setError(api_message);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error logging in:\", error);\n      setError(\"Invalid username or password\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: 300,\n        marginTop: \"2rem\",\n        padding: \"2rem\",\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"ICIT Account Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"ICIT Account\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          margin: \"normal\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Password\",\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          margin: \"normal\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"https://account.kmutnb.ac.th/web/recovery/index\",\n          target: \"_blank\",\n          underline: \"hover\",\n          sx: {\n            color: \"#EB6725\",\n            fontWeight: \"bold\",\n            display: \"block\",\n            marginBottom: \"1rem\"\n          },\n          children: \"Forgot ICIT Account Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"primary\",\n          type: \"submit\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          sx: {\n            marginTop: \"1rem\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 540,\n    columnNumber: 5\n  }, this);\n};\n_s(FirebaseLogin, \"4jNknrOuvZJHDfLk30xz3DpS4Uw=\");\n_c = FirebaseLogin;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"FirebaseLogin\");","map":{"version":3,"names":["React","useState","axios","TextField","Button","Typography","Link","Box","jsxDEV","_jsxDEV","FirebaseLogin","onLogin","_s","username","setUsername","password","setPassword","error","setError","onSubmit","e","preventDefault","response","post","data","api_status","api_message","userInfo","console","log","account_type","studentPayload","S_id","S_name","displayname","st_firstname_en","firstname_en","st_lastname_en","lastname_en","st_email","email","st_account_type","st_status","localStorage","setItem","AdminPayload","A_id","A_name","TeacherPayload","T_id","T_name","children","sx","width","marginTop","padding","border","borderRadius","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","fullWidth","label","value","onChange","target","margin","type","href","underline","color","fontWeight","display","marginBottom","_c","Login","$RefreshReg$"],"sources":["C:/CSB-haha/create-react-app/src/views/pages/authentication/auth-forms/AuthLogin.js"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useTheme } from '@mui/material/styles';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   FormHelperText,\r\n//   Grid,\r\n//   IconButton,\r\n//   InputAdornment,\r\n//   InputLabel,\r\n//   OutlinedInput,\r\n//   Typography\r\n// } from '@mui/material';\r\n// import * as Yup from 'yup';\r\n// import { Formik } from 'formik';\r\n// import useScriptRef from 'hooks/useScriptRef';\r\n// import AnimateButton from 'ui-component/extended/AnimateButton';\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n// import axios from 'axios';\r\n\r\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\r\n//   const theme = useTheme();\r\n//   const scriptedRef = useScriptRef();\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword((prev) => !prev);\r\n//   };\r\n\r\n//   const handleMouseDownPassword = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n//         username: values.username,\r\n//         password: values.password,\r\n//       });\r\n  \r\n//       if (response && response.data) {\r\n//         const { api_status, api_message, userInfo } = response.data;\r\n  \r\n//         if (api_status === \"success\") {\r\n//           console.log(\"Login successful:\", userInfo);\r\n          \r\n\r\n//           //\r\n//           const payload = {\r\n//             S_id: userInfo.username,\r\n//             S_name: userInfo.displayname,\r\n//             st_firstname_en: userInfo.firstname_en,\r\n//             st_lastname_en: userInfo.lastname_en,\r\n//             st_email: userInfo.email,\r\n//             st_account_type: userInfo.account_type,\r\n//             st_status: true,\r\n//           };\r\n\r\n//           //รอแก้\r\n\r\n\r\n\r\n\r\n//           await axios.post(\"http://localhost:9999/students\", payload);\r\n//           // Redirect to the specified URL\r\n//           window.location.href = \"http://localhost:3000/free/studen/\";\r\n  \r\n//           // Optional: Call onLoginSuccess if you still want to execute it\r\n//           if (typeof onLoginSuccess === 'function') {\r\n//             onLoginSuccess(); \r\n//           }\r\n//         } else if {\r\n\r\n//         }\r\n        \r\n//         else {\r\n//           setError(api_message);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error logging in:\", error);\r\n//       setErrors({ submit: \"Invalid username or password\" });\r\n//     } finally {\r\n//       setSubmitting(false);\r\n//     }\r\n//   };\r\n  \r\n  \r\n\r\n//   return (\r\n//     <>\r\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n//           <Box sx={{ mb: 2 }}>\r\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       <Formik\r\n//         initialValues={{\r\n//           username: '', // Change email to username\r\n//           password: '',\r\n//           submit: null\r\n//         }}\r\n//         validationSchema={Yup.object().shape({\r\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\r\n//           password: Yup.string().max(255).required('Password is required')\r\n//         })}\r\n//         onSubmit={onSubmit}\r\n//       >\r\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n//           <form noValidate onSubmit={handleSubmit} {...others}>\r\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\r\n//                 value={values.username} // Change value to username\r\n//                 name=\"username\" // Change name to username\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 label=\"Username\"\r\n//               />\r\n//               {touched.username && errors.username && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\r\n//                   {errors.username}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-password-login\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={values.password}\r\n//                 name=\"password\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 endAdornment={\r\n//                   <InputAdornment position=\"end\">\r\n//                     <IconButton\r\n//                       aria-label=\"toggle password visibility\"\r\n//                       onClick={handleClickShowPassword}\r\n//                       onMouseDown={handleMouseDownPassword}\r\n//                       edge=\"end\"\r\n//                       size=\"large\"\r\n//                     >\r\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\r\n//                     </IconButton>\r\n//                   </InputAdornment>\r\n//                 }\r\n//                 label=\"Password\"\r\n//               />\r\n//               {touched.password && errors.password && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n//                   {errors.password}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             {errors.submit && (\r\n//               <Box sx={{ mt: 3 }}>\r\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\r\n//               </Box>\r\n//             )}\r\n\r\n//             <Box sx={{ mt: 2 }}>\r\n//               <AnimateButton>\r\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n//                   Sign in\r\n//                 </Button>\r\n//               </AnimateButton>\r\n//             </Box>\r\n//             <Typography\r\n//               component=\"a\"\r\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n//               target=\"_blank\"\r\n//               rel=\"noopener noreferrer\"\r\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\r\n//             >\r\n//               Forgot ICIT Account Password\r\n//             </Typography>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FirebaseLogin;\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useState } from \"react\";\r\n// // import axios from \"axios\";\r\n// // import { Typography, Button, Box, TextField } from '@mui/material';\r\n\r\n// // const FirebaseLogin = ({ onLoginSuccess }) => {\r\n// //     const [username, setUsername] = useState(\"\");\r\n// //     const [password, setPassword] = useState(\"\");\r\n// //     const [error, setError] = useState(\"\");\r\n\r\n// //     const onSubmit = async (e) => {\r\n// //         e.preventDefault();\r\n// //         try {\r\n// //             const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n// //                 username,\r\n// //                 password,\r\n// //             });\r\n\r\n// //             if (response && response.data) {\r\n// //                 const { api_status, api_message, userInfo } = response.data;\r\n\r\n// //                 if (api_status === \"success\") {\r\n// //                     console.log(\"Login successful:\", userInfo);\r\n                    \r\n// //                     // Call the onLoginSuccess prop to navigate\r\n// //                     onLoginSuccess(); // This line calls the function passed from App component\r\n// //                 } else {\r\n// //                     setError(api_message);\r\n// //                 }\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error(\"Error logging in:\", error);\r\n// //             setError(\"Invalid username or password\");\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <Box\r\n// //             sx={{\r\n// //                 display: 'flex',\r\n// //                 flexDirection: 'column',\r\n// //                 alignItems: 'center',\r\n// //                 justifyContent: 'center',\r\n// //                 height: '100vh',\r\n// //                 backgroundColor: '#f5f5f5',\r\n// //             }}\r\n// //         >\r\n// //             <Box\r\n// //                 sx={{\r\n// //                     width: 300,\r\n// //                     padding: 3,\r\n// //                     backgroundColor: 'white',\r\n// //                     borderRadius: 2,\r\n// //                     boxShadow: 3,\r\n// //                 }}\r\n// //             >\r\n// //                 <Typography variant=\"h5\" gutterBottom align=\"center\">\r\n// //                     Login\r\n// //                 </Typography>\r\n// //                 <form onSubmit={onSubmit}>\r\n// //                     <TextField\r\n// //                         fullWidth\r\n// //                         label=\"ICIT Account\"\r\n// //                         variant=\"outlined\"\r\n// //                         margin=\"normal\"\r\n// //                         value={username}\r\n// //                         onChange={(e) => setUsername(e.target.value)}\r\n// //                     />\r\n// //                     <TextField\r\n// //                         fullWidth\r\n// //                         label=\"Password\"\r\n// //                         variant=\"outlined\"\r\n// //                         margin=\"normal\"\r\n// //                         type=\"password\"\r\n// //                         value={password}\r\n// //                         onChange={(e) => setPassword(e.target.value)}\r\n// //                     />\r\n// //                     <Button\r\n// //                         fullWidth\r\n// //                         type=\"submit\"\r\n// //                         variant=\"contained\"\r\n// //                         color=\"primary\"\r\n// //                         sx={{ mt: 2 }}\r\n// //                     >\r\n// //                         Sign in\r\n// //                     </Button>\r\n// //                     {error && <Typography sx={{ mt: 2, color: 'red' }}>{error}</Typography>}\r\n// //                 </form>\r\n// //             </Box>\r\n// //         </Box>\r\n// //     );\r\n// // };\r\n\r\n// // export default FirebaseLogin;\r\n\r\n// import { useState } from 'react';\r\n// import { useTheme } from '@mui/material/styles';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   FormHelperText,\r\n//   Grid,\r\n//   IconButton,\r\n//   InputAdornment,\r\n//   InputLabel,\r\n//   OutlinedInput,\r\n//   Typography\r\n// } from '@mui/material';\r\n// import * as Yup from 'yup';\r\n// import { Formik } from 'formik';\r\n// import useScriptRef from 'hooks/useScriptRef';\r\n// import AnimateButton from 'ui-component/extended/AnimateButton';\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n// import axios from 'axios';\r\n\r\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\r\n//   const theme = useTheme();\r\n//   const scriptedRef = useScriptRef();\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword((prev) => !prev);\r\n//   };\r\n\r\n//   const handleMouseDownPassword = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n//         username: values.username,\r\n//         password: values.password,\r\n//       });\r\n\r\n//       if (response && response.data) {\r\n//         const { api_status, api_message, userInfo } = response.data;\r\n\r\n//         if (api_status === \"success\") {\r\n//           console.log(\"Login successful:\", userInfo);\r\n\r\n//           // เก็บ username ใน Local Storage\r\n//           localStorage.setItem(\"username\", values.username);\r\n\r\n//           // Redirect to the specified URL\r\n//           window.location.href = \"http://localhost:3000/free/studen/\";\r\n\r\n//           // Optional: Call onLoginSuccess if you still want to execute it\r\n//           if (typeof onLoginSuccess === 'function') {\r\n//             onLoginSuccess();\r\n//           }\r\n//         } else {\r\n//           setError(api_message);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error logging in:\", error);\r\n//       setErrors({ submit: \"Invalid username or password\" });\r\n//     } finally {\r\n//       setSubmitting(false);\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n//           <Box sx={{ mb: 2 }}>\r\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       <Formik\r\n//         initialValues={{\r\n//           username: '', // Change email to username\r\n//           password: '',\r\n//           submit: null\r\n//         }}\r\n//         validationSchema={Yup.object().shape({\r\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\r\n//           password: Yup.string().max(255).required('Password is required')\r\n//         })}\r\n//         onSubmit={onSubmit}\r\n//       >\r\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n//           <form noValidate onSubmit={handleSubmit} {...others}>\r\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\r\n//                 value={values.username} // Change value to username\r\n//                 name=\"username\" // Change name to username\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 label=\"Username\"\r\n//               />\r\n//               {touched.username && errors.username && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\r\n//                   {errors.username}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-password-login\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={values.password}\r\n//                 name=\"password\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 endAdornment={\r\n//                   <InputAdornment position=\"end\">\r\n//                     <IconButton\r\n//                       aria-label=\"toggle password visibility\"\r\n//                       onClick={handleClickShowPassword}\r\n//                       onMouseDown={handleMouseDownPassword}\r\n//                       edge=\"end\"\r\n//                       size=\"large\"\r\n//                     >\r\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\r\n//                     </IconButton>\r\n//                   </InputAdornment>\r\n//                 }\r\n//                 label=\"Password\"\r\n//               />\r\n//               {touched.password && errors.password && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n//                   {errors.password}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             {errors.submit && (\r\n//               <Box sx={{ mt: 3 }}>\r\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\r\n//               </Box>\r\n//             )}\r\n\r\n//             <Box sx={{ mt: 2 }}>\r\n//               <AnimateButton>\r\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n//                   Sign in\r\n//                 </Button>\r\n//               </AnimateButton>\r\n//             </Box>\r\n//             <Typography\r\n//               component=\"a\"\r\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n//               target=\"_blank\"\r\n//               rel=\"noopener noreferrer\"\r\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\r\n//             >\r\n//               Forgot ICIT Account Password\r\n//             </Typography>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FirebaseLogin;\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TextField, Button, Typography, Link, Box } from \"@mui/material\";\r\n\r\nconst FirebaseLogin = ({ onLogin }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n        username,\r\n        password,\r\n      });\r\n\r\n      if (response && response.data) {\r\n        const { api_status, api_message, userInfo } = response.data;\r\n\r\n        if (api_status === \"success\") {\r\n          console.log(\"Login successful:\", userInfo);\r\n          \r\n          if (userInfo.account_type === \"students\") {\r\n            const studentPayload = {\r\n              S_id: userInfo.username,\r\n              S_name: userInfo.displayname,\r\n              st_firstname_en: userInfo.firstname_en,\r\n              st_lastname_en: userInfo.lastname_en,\r\n              st_email: userInfo.email,\r\n              st_account_type: userInfo.account_type,\r\n              st_status: true,\r\n            };\r\n\r\n            await axios.post(\"http://localhost:9999/students\", studentPayload);\r\n            localStorage.setItem(\"S_id\", userInfo.username);\r\n\r\n          } else if (userInfo.account_type === \"admin\") {\r\n            const AdminPayload = {\r\n              A_id: userInfo.username,\r\n              A_name: userInfo.displayname,\r\n            };\r\n\r\n            await axios.post(\"http://localhost:9999/admins\", AdminPayload);\r\n            localStorage.setItem(\"A_id\", userInfo.username);\r\n\r\n          } else if (userInfo.account_type === \"teachers\") {\r\n            const TeacherPayload = {\r\n              T_id: userInfo.username,\r\n              T_name: userInfo.displayname,\r\n            };\r\n\r\n            await axios.post(\"http://localhost:9999/teachers\", TeacherPayload);\r\n            localStorage.setItem(\"T_id\", userInfo.username);\r\n          }\r\n\r\n          // Notify the parent component of login and pass account type\r\n          onLogin(true, userInfo.account_type);\r\n        } else {\r\n          setError(api_message);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error logging in:\", error);\r\n      setError(\"Invalid username or password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <center>\r\n      <Box\r\n        sx={{\r\n          width: 300,\r\n          marginTop: \"2rem\",\r\n          padding: \"2rem\",\r\n          border: \"1px solid #ccc\",\r\n          borderRadius: \"8px\",\r\n        }}\r\n      >\r\n        <form onSubmit={onSubmit}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            ICIT Account Login\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"ICIT Account\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Link\r\n            href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n            target=\"_blank\"\r\n            underline=\"hover\"\r\n            sx={{\r\n              color: \"#EB6725\",\r\n              fontWeight: \"bold\",\r\n              display: \"block\",\r\n              marginBottom: \"1rem\",\r\n            }}\r\n          >\r\n            Forgot ICIT Account Password\r\n          </Link>\r\n          <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">\r\n            Sign in\r\n          </Button>\r\n          {error && (\r\n            <Typography color=\"error\" sx={{ marginTop: \"1rem\" }}>\r\n              {error}\r\n            </Typography>\r\n          )}\r\n        </form>\r\n      </Box>\r\n    </center>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,MAAM,EAAEC,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}