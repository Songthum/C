{"ast":null,"code":"// import { useState } from 'react';\n// import { useTheme } from '@mui/material/styles';\n// import {\n//   Box,\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   IconButton,\n//   InputAdornment,\n//   InputLabel,\n//   OutlinedInput,\n//   Typography\n// } from '@mui/material';\n// import * as Yup from 'yup';\n// import { Formik } from 'formik';\n// import useScriptRef from 'hooks/useScriptRef';\n// import AnimateButton from 'ui-component/extended/AnimateButton';\n// import Visibility from '@mui/icons-material/Visibility';\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\n// import axios from 'axios';\n\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\n//   const theme = useTheme();\n//   const scriptedRef = useScriptRef();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword((prev) => !prev);\n//   };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\n//     try {\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\n//         username: values.username,\n//         password: values.password,\n//       });\n\n//       if (response && response.data) {\n//         const { api_status, api_message, userInfo } = response.data;\n\n//         if (api_status === \"success\") {\n//           console.log(\"Login successful:\", userInfo);\n\n//           //\n//           const payload = {\n//             S_id: userInfo.username,\n//             S_name: userInfo.displayname,\n//             st_firstname_en: userInfo.firstname_en,\n//             st_lastname_en: userInfo.lastname_en,\n//             st_email: userInfo.email,\n//             st_account_type: userInfo.account_type,\n//             st_status: true,\n//           };\n\n//           //รอแก้\n\n//           await axios.post(\"http://localhost:9999/students\", payload);\n//           // Redirect to the specified URL\n//           window.location.href = \"http://localhost:3000/free/studen/\";\n\n//           // Optional: Call onLoginSuccess if you still want to execute it\n//           if (typeof onLoginSuccess === 'function') {\n//             onLoginSuccess(); \n//           }\n//         } else if {\n\n//         }\n\n//         else {\n//           setError(api_message);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Error logging in:\", error);\n//       setErrors({ submit: \"Invalid username or password\" });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\n//           <Box sx={{ mb: 2 }}>\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       <Formik\n//         initialValues={{\n//           username: '', // Change email to username\n//           password: '',\n//           submit: null\n//         }}\n//         validationSchema={Yup.object().shape({\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\n//           password: Yup.string().max(255).required('Password is required')\n//         })}\n//         onSubmit={onSubmit}\n//       >\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//           <form noValidate onSubmit={handleSubmit} {...others}>\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\n//               <OutlinedInput\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\n//                 value={values.username} // Change value to username\n//                 name=\"username\" // Change name to username\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 label=\"Username\"\n//               />\n//               {touched.username && errors.username && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\n//                   {errors.username}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-password-login\"\n//                 type={showPassword ? 'text' : 'password'}\n//                 value={values.password}\n//                 name=\"password\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       aria-label=\"toggle password visibility\"\n//                       onClick={handleClickShowPassword}\n//                       onMouseDown={handleMouseDownPassword}\n//                       edge=\"end\"\n//                       size=\"large\"\n//                     >\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//                 label=\"Password\"\n//               />\n//               {touched.password && errors.password && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n//                   {errors.password}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             {errors.submit && (\n//               <Box sx={{ mt: 3 }}>\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\n//               </Box>\n//             )}\n\n//             <Box sx={{ mt: 2 }}>\n//               <AnimateButton>\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n//                   Sign in\n//                 </Button>\n//               </AnimateButton>\n//             </Box>\n//             <Typography\n//               component=\"a\"\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\n//               target=\"_blank\"\n//               rel=\"noopener noreferrer\"\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\n//             >\n//               Forgot ICIT Account Password\n//             </Typography>\n//           </form>\n//         )}\n//       </Formik>\n//     </>\n//   );\n// };\n\n// export default FirebaseLogin;\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n// // import { Typography, Button, Box, TextField } from '@mui/material';\n\n// // const FirebaseLogin = ({ onLoginSuccess }) => {\n// //     const [username, setUsername] = useState(\"\");\n// //     const [password, setPassword] = useState(\"\");\n// //     const [error, setError] = useState(\"\");\n\n// //     const onSubmit = async (e) => {\n// //         e.preventDefault();\n// //         try {\n// //             const response = await axios.post(\"http://localhost:9999/auth/login\", {\n// //                 username,\n// //                 password,\n// //             });\n\n// //             if (response && response.data) {\n// //                 const { api_status, api_message, userInfo } = response.data;\n\n// //                 if (api_status === \"success\") {\n// //                     console.log(\"Login successful:\", userInfo);\n\n// //                     // Call the onLoginSuccess prop to navigate\n// //                     onLoginSuccess(); // This line calls the function passed from App component\n// //                 } else {\n// //                     setError(api_message);\n// //                 }\n// //             }\n// //         } catch (error) {\n// //             console.error(\"Error logging in:\", error);\n// //             setError(\"Invalid username or password\");\n// //         }\n// //     };\n\n// //     return (\n// //         <Box\n// //             sx={{\n// //                 display: 'flex',\n// //                 flexDirection: 'column',\n// //                 alignItems: 'center',\n// //                 justifyContent: 'center',\n// //                 height: '100vh',\n// //                 backgroundColor: '#f5f5f5',\n// //             }}\n// //         >\n// //             <Box\n// //                 sx={{\n// //                     width: 300,\n// //                     padding: 3,\n// //                     backgroundColor: 'white',\n// //                     borderRadius: 2,\n// //                     boxShadow: 3,\n// //                 }}\n// //             >\n// //                 <Typography variant=\"h5\" gutterBottom align=\"center\">\n// //                     Login\n// //                 </Typography>\n// //                 <form onSubmit={onSubmit}>\n// //                     <TextField\n// //                         fullWidth\n// //                         label=\"ICIT Account\"\n// //                         variant=\"outlined\"\n// //                         margin=\"normal\"\n// //                         value={username}\n// //                         onChange={(e) => setUsername(e.target.value)}\n// //                     />\n// //                     <TextField\n// //                         fullWidth\n// //                         label=\"Password\"\n// //                         variant=\"outlined\"\n// //                         margin=\"normal\"\n// //                         type=\"password\"\n// //                         value={password}\n// //                         onChange={(e) => setPassword(e.target.value)}\n// //                     />\n// //                     <Button\n// //                         fullWidth\n// //                         type=\"submit\"\n// //                         variant=\"contained\"\n// //                         color=\"primary\"\n// //                         sx={{ mt: 2 }}\n// //                     >\n// //                         Sign in\n// //                     </Button>\n// //                     {error && <Typography sx={{ mt: 2, color: 'red' }}>{error}</Typography>}\n// //                 </form>\n// //             </Box>\n// //         </Box>\n// //     );\n// // };\n\n// // export default FirebaseLogin;\n\n// import { useState } from 'react';\n// import { useTheme } from '@mui/material/styles';\n// import {\n//   Box,\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   IconButton,\n//   InputAdornment,\n//   InputLabel,\n//   OutlinedInput,\n//   Typography\n// } from '@mui/material';\n// import * as Yup from 'yup';\n// import { Formik } from 'formik';\n// import useScriptRef from 'hooks/useScriptRef';\n// import AnimateButton from 'ui-component/extended/AnimateButton';\n// import Visibility from '@mui/icons-material/Visibility';\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\n// import axios from 'axios';\n\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\n//   const theme = useTheme();\n//   const scriptedRef = useScriptRef();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword((prev) => !prev);\n//   };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\n//     try {\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\n//         username: values.username,\n//         password: values.password,\n//       });\n\n//       if (response && response.data) {\n//         const { api_status, api_message, userInfo } = response.data;\n\n//         if (api_status === \"success\") {\n//           console.log(\"Login successful:\", userInfo);\n\n//           // เก็บ username ใน Local Storage\n//           localStorage.setItem(\"username\", values.username);\n\n//           // Redirect to the specified URL\n//           window.location.href = \"http://localhost:3000/free/studen/\";\n\n//           // Optional: Call onLoginSuccess if you still want to execute it\n//           if (typeof onLoginSuccess === 'function') {\n//             onLoginSuccess();\n//           }\n//         } else {\n//           setError(api_message);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Error logging in:\", error);\n//       setErrors({ submit: \"Invalid username or password\" });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\n//           <Box sx={{ mb: 2 }}>\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       <Formik\n//         initialValues={{\n//           username: '', // Change email to username\n//           password: '',\n//           submit: null\n//         }}\n//         validationSchema={Yup.object().shape({\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\n//           password: Yup.string().max(255).required('Password is required')\n//         })}\n//         onSubmit={onSubmit}\n//       >\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//           <form noValidate onSubmit={handleSubmit} {...others}>\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\n//               <OutlinedInput\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\n//                 value={values.username} // Change value to username\n//                 name=\"username\" // Change name to username\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 label=\"Username\"\n//               />\n//               {touched.username && errors.username && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\n//                   {errors.username}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n//               <OutlinedInput\n//                 id=\"outlined-adornment-password-login\"\n//                 type={showPassword ? 'text' : 'password'}\n//                 value={values.password}\n//                 name=\"password\"\n//                 onBlur={handleBlur}\n//                 onChange={handleChange}\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       aria-label=\"toggle password visibility\"\n//                       onClick={handleClickShowPassword}\n//                       onMouseDown={handleMouseDownPassword}\n//                       edge=\"end\"\n//                       size=\"large\"\n//                     >\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//                 label=\"Password\"\n//               />\n//               {touched.password && errors.password && (\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n//                   {errors.password}\n//                 </FormHelperText>\n//               )}\n//             </FormControl>\n\n//             {errors.submit && (\n//               <Box sx={{ mt: 3 }}>\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\n//               </Box>\n//             )}\n\n//             <Box sx={{ mt: 2 }}>\n//               <AnimateButton>\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n//                   Sign in\n//                 </Button>\n//               </AnimateButton>\n//             </Box>\n//             <Typography\n//               component=\"a\"\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\n//               target=\"_blank\"\n//               rel=\"noopener noreferrer\"\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\n//             >\n//               Forgot ICIT Account Password\n//             </Typography>\n//           </form>\n//         )}\n//       </Formik>\n//     </>\n//   );\n// };\n\n// export default FirebaseLogin;","map":{"version":3,"names":[],"sources":["C:/CSB-haha/create-react-app/src/views/pages/authentication/auth-forms/AuthLogin.js"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useTheme } from '@mui/material/styles';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   FormHelperText,\r\n//   Grid,\r\n//   IconButton,\r\n//   InputAdornment,\r\n//   InputLabel,\r\n//   OutlinedInput,\r\n//   Typography\r\n// } from '@mui/material';\r\n// import * as Yup from 'yup';\r\n// import { Formik } from 'formik';\r\n// import useScriptRef from 'hooks/useScriptRef';\r\n// import AnimateButton from 'ui-component/extended/AnimateButton';\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n// import axios from 'axios';\r\n\r\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\r\n//   const theme = useTheme();\r\n//   const scriptedRef = useScriptRef();\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword((prev) => !prev);\r\n//   };\r\n\r\n//   const handleMouseDownPassword = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n//         username: values.username,\r\n//         password: values.password,\r\n//       });\r\n  \r\n//       if (response && response.data) {\r\n//         const { api_status, api_message, userInfo } = response.data;\r\n  \r\n//         if (api_status === \"success\") {\r\n//           console.log(\"Login successful:\", userInfo);\r\n          \r\n\r\n//           //\r\n//           const payload = {\r\n//             S_id: userInfo.username,\r\n//             S_name: userInfo.displayname,\r\n//             st_firstname_en: userInfo.firstname_en,\r\n//             st_lastname_en: userInfo.lastname_en,\r\n//             st_email: userInfo.email,\r\n//             st_account_type: userInfo.account_type,\r\n//             st_status: true,\r\n//           };\r\n\r\n//           //รอแก้\r\n\r\n\r\n\r\n\r\n//           await axios.post(\"http://localhost:9999/students\", payload);\r\n//           // Redirect to the specified URL\r\n//           window.location.href = \"http://localhost:3000/free/studen/\";\r\n  \r\n//           // Optional: Call onLoginSuccess if you still want to execute it\r\n//           if (typeof onLoginSuccess === 'function') {\r\n//             onLoginSuccess(); \r\n//           }\r\n//         } else if {\r\n\r\n//         }\r\n        \r\n//         else {\r\n//           setError(api_message);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error logging in:\", error);\r\n//       setErrors({ submit: \"Invalid username or password\" });\r\n//     } finally {\r\n//       setSubmitting(false);\r\n//     }\r\n//   };\r\n  \r\n  \r\n\r\n//   return (\r\n//     <>\r\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n//           <Box sx={{ mb: 2 }}>\r\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       <Formik\r\n//         initialValues={{\r\n//           username: '', // Change email to username\r\n//           password: '',\r\n//           submit: null\r\n//         }}\r\n//         validationSchema={Yup.object().shape({\r\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\r\n//           password: Yup.string().max(255).required('Password is required')\r\n//         })}\r\n//         onSubmit={onSubmit}\r\n//       >\r\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n//           <form noValidate onSubmit={handleSubmit} {...others}>\r\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\r\n//                 value={values.username} // Change value to username\r\n//                 name=\"username\" // Change name to username\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 label=\"Username\"\r\n//               />\r\n//               {touched.username && errors.username && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\r\n//                   {errors.username}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-password-login\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={values.password}\r\n//                 name=\"password\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 endAdornment={\r\n//                   <InputAdornment position=\"end\">\r\n//                     <IconButton\r\n//                       aria-label=\"toggle password visibility\"\r\n//                       onClick={handleClickShowPassword}\r\n//                       onMouseDown={handleMouseDownPassword}\r\n//                       edge=\"end\"\r\n//                       size=\"large\"\r\n//                     >\r\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\r\n//                     </IconButton>\r\n//                   </InputAdornment>\r\n//                 }\r\n//                 label=\"Password\"\r\n//               />\r\n//               {touched.password && errors.password && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n//                   {errors.password}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             {errors.submit && (\r\n//               <Box sx={{ mt: 3 }}>\r\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\r\n//               </Box>\r\n//             )}\r\n\r\n//             <Box sx={{ mt: 2 }}>\r\n//               <AnimateButton>\r\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n//                   Sign in\r\n//                 </Button>\r\n//               </AnimateButton>\r\n//             </Box>\r\n//             <Typography\r\n//               component=\"a\"\r\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n//               target=\"_blank\"\r\n//               rel=\"noopener noreferrer\"\r\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\r\n//             >\r\n//               Forgot ICIT Account Password\r\n//             </Typography>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FirebaseLogin;\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useState } from \"react\";\r\n// // import axios from \"axios\";\r\n// // import { Typography, Button, Box, TextField } from '@mui/material';\r\n\r\n// // const FirebaseLogin = ({ onLoginSuccess }) => {\r\n// //     const [username, setUsername] = useState(\"\");\r\n// //     const [password, setPassword] = useState(\"\");\r\n// //     const [error, setError] = useState(\"\");\r\n\r\n// //     const onSubmit = async (e) => {\r\n// //         e.preventDefault();\r\n// //         try {\r\n// //             const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n// //                 username,\r\n// //                 password,\r\n// //             });\r\n\r\n// //             if (response && response.data) {\r\n// //                 const { api_status, api_message, userInfo } = response.data;\r\n\r\n// //                 if (api_status === \"success\") {\r\n// //                     console.log(\"Login successful:\", userInfo);\r\n                    \r\n// //                     // Call the onLoginSuccess prop to navigate\r\n// //                     onLoginSuccess(); // This line calls the function passed from App component\r\n// //                 } else {\r\n// //                     setError(api_message);\r\n// //                 }\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error(\"Error logging in:\", error);\r\n// //             setError(\"Invalid username or password\");\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <Box\r\n// //             sx={{\r\n// //                 display: 'flex',\r\n// //                 flexDirection: 'column',\r\n// //                 alignItems: 'center',\r\n// //                 justifyContent: 'center',\r\n// //                 height: '100vh',\r\n// //                 backgroundColor: '#f5f5f5',\r\n// //             }}\r\n// //         >\r\n// //             <Box\r\n// //                 sx={{\r\n// //                     width: 300,\r\n// //                     padding: 3,\r\n// //                     backgroundColor: 'white',\r\n// //                     borderRadius: 2,\r\n// //                     boxShadow: 3,\r\n// //                 }}\r\n// //             >\r\n// //                 <Typography variant=\"h5\" gutterBottom align=\"center\">\r\n// //                     Login\r\n// //                 </Typography>\r\n// //                 <form onSubmit={onSubmit}>\r\n// //                     <TextField\r\n// //                         fullWidth\r\n// //                         label=\"ICIT Account\"\r\n// //                         variant=\"outlined\"\r\n// //                         margin=\"normal\"\r\n// //                         value={username}\r\n// //                         onChange={(e) => setUsername(e.target.value)}\r\n// //                     />\r\n// //                     <TextField\r\n// //                         fullWidth\r\n// //                         label=\"Password\"\r\n// //                         variant=\"outlined\"\r\n// //                         margin=\"normal\"\r\n// //                         type=\"password\"\r\n// //                         value={password}\r\n// //                         onChange={(e) => setPassword(e.target.value)}\r\n// //                     />\r\n// //                     <Button\r\n// //                         fullWidth\r\n// //                         type=\"submit\"\r\n// //                         variant=\"contained\"\r\n// //                         color=\"primary\"\r\n// //                         sx={{ mt: 2 }}\r\n// //                     >\r\n// //                         Sign in\r\n// //                     </Button>\r\n// //                     {error && <Typography sx={{ mt: 2, color: 'red' }}>{error}</Typography>}\r\n// //                 </form>\r\n// //             </Box>\r\n// //         </Box>\r\n// //     );\r\n// // };\r\n\r\n// // export default FirebaseLogin;\r\n\r\n// import { useState } from 'react';\r\n// import { useTheme } from '@mui/material/styles';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   FormHelperText,\r\n//   Grid,\r\n//   IconButton,\r\n//   InputAdornment,\r\n//   InputLabel,\r\n//   OutlinedInput,\r\n//   Typography\r\n// } from '@mui/material';\r\n// import * as Yup from 'yup';\r\n// import { Formik } from 'formik';\r\n// import useScriptRef from 'hooks/useScriptRef';\r\n// import AnimateButton from 'ui-component/extended/AnimateButton';\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n// import axios from 'axios';\r\n\r\n// const FirebaseLogin = ({ onLoginSuccess, setUsername, ...others }) => {\r\n//   const theme = useTheme();\r\n//   const scriptedRef = useScriptRef();\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword((prev) => !prev);\r\n//   };\r\n\r\n//   const handleMouseDownPassword = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   const onSubmit = async (values, { setErrors, setSubmitting }) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:9999/auth/login\", {\r\n//         username: values.username,\r\n//         password: values.password,\r\n//       });\r\n\r\n//       if (response && response.data) {\r\n//         const { api_status, api_message, userInfo } = response.data;\r\n\r\n//         if (api_status === \"success\") {\r\n//           console.log(\"Login successful:\", userInfo);\r\n\r\n//           // เก็บ username ใน Local Storage\r\n//           localStorage.setItem(\"username\", values.username);\r\n\r\n//           // Redirect to the specified URL\r\n//           window.location.href = \"http://localhost:3000/free/studen/\";\r\n\r\n//           // Optional: Call onLoginSuccess if you still want to execute it\r\n//           if (typeof onLoginSuccess === 'function') {\r\n//             onLoginSuccess();\r\n//           }\r\n//         } else {\r\n//           setError(api_message);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error logging in:\", error);\r\n//       setErrors({ submit: \"Invalid username or password\" });\r\n//     } finally {\r\n//       setSubmitting(false);\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n//         <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n//           <Box sx={{ mb: 2 }}>\r\n//             <Typography variant=\"subtitle1\">Sign in Icit Account</Typography>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       <Formik\r\n//         initialValues={{\r\n//           username: '', // Change email to username\r\n//           password: '',\r\n//           submit: null\r\n//         }}\r\n//         validationSchema={Yup.object().shape({\r\n//           username: Yup.string().max(255).required('Username is required'), // Update validation for username\r\n//           password: Yup.string().max(255).required('Password is required')\r\n//         })}\r\n//         onSubmit={onSubmit}\r\n//       >\r\n//         {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n//           <form noValidate onSubmit={handleSubmit} {...others}>\r\n//             <FormControl fullWidth error={Boolean(touched.username && errors.username)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-username-login\">Username</InputLabel> {/* Change label to Username */}\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-username-login\" // Change ID to reflect username\r\n//                 value={values.username} // Change value to username\r\n//                 name=\"username\" // Change name to username\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 label=\"Username\"\r\n//               />\r\n//               {touched.username && errors.username && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-username-login\">\r\n//                   {errors.username}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             <FormControl fullWidth error={Boolean(touched.password && errors.password)} sx={{ ...theme.typography.customInput }}>\r\n//               <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n//               <OutlinedInput\r\n//                 id=\"outlined-adornment-password-login\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={values.password}\r\n//                 name=\"password\"\r\n//                 onBlur={handleBlur}\r\n//                 onChange={handleChange}\r\n//                 endAdornment={\r\n//                   <InputAdornment position=\"end\">\r\n//                     <IconButton\r\n//                       aria-label=\"toggle password visibility\"\r\n//                       onClick={handleClickShowPassword}\r\n//                       onMouseDown={handleMouseDownPassword}\r\n//                       edge=\"end\"\r\n//                       size=\"large\"\r\n//                     >\r\n//                       {showPassword ? <Visibility /> : <VisibilityOff />}\r\n//                     </IconButton>\r\n//                   </InputAdornment>\r\n//                 }\r\n//                 label=\"Password\"\r\n//               />\r\n//               {touched.password && errors.password && (\r\n//                 <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n//                   {errors.password}\r\n//                 </FormHelperText>\r\n//               )}\r\n//             </FormControl>\r\n\r\n//             {errors.submit && (\r\n//               <Box sx={{ mt: 3 }}>\r\n//                 <FormHelperText error>{errors.submit}</FormHelperText>\r\n//               </Box>\r\n//             )}\r\n\r\n//             <Box sx={{ mt: 2 }}>\r\n//               <AnimateButton>\r\n//                 <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n//                   Sign in\r\n//                 </Button>\r\n//               </AnimateButton>\r\n//             </Box>\r\n//             <Typography\r\n//               component=\"a\"\r\n//               href=\"https://account.kmutnb.ac.th/web/recovery/index\"\r\n//               target=\"_blank\"\r\n//               rel=\"noopener noreferrer\"\r\n//               sx={{ mt: 2, display: 'block', color: '#EB6725', fontWeight: 'bold', textAlign: 'center' }}\r\n//             >\r\n//               Forgot ICIT Account Password\r\n//             </Typography>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FirebaseLogin;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}