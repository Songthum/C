{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Button, Paper, Grid, Table, TextField, TableBody, TableCell, TableContainer, TableHead, TableRow, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';\n// import axios from 'axios';\n// import { gridSpacing } from 'store/constant';\n\n// function InputScoreCSB01() {\n//   const [projects, setProjects] = useState([]);\n//   const [examResults, setExamResults] = useState([]);\n//   const [open, setOpen] = useState(false);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const initialData = [\n//     { id: 1, name: 'การวิเคราะห์ปัญหา(Problem Analysis)', description: ['1. มีการระบุที่มาของปัญหา', '2. มีการนำเสนอข้อมูลทางสถิติหรือหลักฐานเพื่อสนับสนุนความสำคัญของปัญหา', '3. มีอ้างอิงแหล่งข้อมูลที่น่าเชื่อถือ'], score: '' },\n//     { id: 2, name: 'แนวคิด/ แนวทางของระบบ(Solution)', description: ['1. มีความสามารถแก้ปัญหาได้แท้จริง ตรงเป้า', '2. มีวิธีการที่นำเสนอที่มีประสิทธิภาพ'], score: '' },\n//     { id: 3, name: 'ขอบเขตและปริมาณงาน(Scope)', description: ['1. มีลักษณะและปริมาณงานเหมาะสมสำหรับปริญญานิพนธ์', '2. มีความเหมาะสมตามกรอบเวลา'], score: '' },\n//     { id: 4, name: 'ต้นแบบระบบ(System Prototype)', description: ['มีการนำเสนอต้นแบบระบบด้วยเครื่องมือที่มีความเหมาะสม เช่น Mockup, wireframe, story board และ system architecture'], score: '' },\n//     { id: 5, name: 'ลักษณะของกลุ่มผู้ใช้งาน(Target market)', description: ['1. มีการกำหนดเป้าหมายสำหรับการใช้งานระบบอย่างชัดเจน', '2. มีการศึกษาลักษณะกลุ่มเป้าหมาย', '3. มีการศึกษาผลกระทบที่คาดว่าจะเกิดต่อกลุ่มเป้าหมาย'], score: '' },\n//     { id: 6, name: 'การวิเคราะห์การตลาด (Market analysis)', description: ['1. มีการนำเสนอระบบที่ใกล้เคียง/ที่เกี่ยวข้องอย่างน้อย 2 ระบบ', '2. มีการระบุข้อจำกัดของระบบที่ใกล้เคียงหรือเกี่ยวข้อง', '3. มีการระบุความแตกต่างหรือจุดเด่นของระบบที่นำเสนอ'], score: '' },\n//     { id: 7, name: 'การศึกษาความเป็นไปได้ (Feasibility study)', description: ['1. มีการนำเสนอการศึกษาเทคนิคที่เกี่ยวข้องเบื้องต้น ', '2. มีการศึกษาข้อจำกัดของอุปกรณ์/ระบบที่เกี่ยวข้อง'], score: '' },\n//     { id: 8, name: 'ผลการประเมิน', score: '' },\n//   ];\n\n//   const [Data, setData] = useState(initialData);\n//   const [allChecked, setAllChecked] = useState(false);\n\n//   useEffect(() => {\n//     const fetchProjects = async () => {\n\n//     };\n\n//     fetchProjects();\n//   }, []);  \n\n//   useEffect(() => {\n//     updateFinalScore();\n//     checkAllChecked();\n//   }, [Data]);\n\n//   const handleDonNotGoAny = () => {\n//     const updatedData = projects.map(project => ({ ...project, isRed: true, isDisabled: true }));\n//     setProjects(updatedData);\n//   };\n\n//   const handleLinkClick = (index) => {\n//     setSelectedProject(projects[index]);\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     resetCheckboxData(); // Reset checkbox values when closing the dialog\n//   };\n\n//   const handleDisableRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isDisabled: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleRedRow = (index) => {\n//     const updatedProjects = projects.map((project, i) =>\n//       i === index ? { ...project, isRed: true } : project\n//     );\n//     setProjects(updatedProjects);\n//   };\n\n//   const handleCheckboxChange = (id, type) => {\n//     setData(prevData =>\n//       prevData.map(item =>\n//         item.id === id\n//           ? { ...item, score: type === 'yes' ? 'ผ่าน' : 'ไม่ผ่าน' }\n//           : item\n//       )\n//     );\n//   };\n\n//   const updateFinalScore = () => {\n//     const countPass = Data\n//       .filter(item => item.id >= 1 && item.id <= 7)\n//       .filter(item => item.score === 'ผ่าน').length;\n\n//     const countFail = Data\n//       .filter(item => item.id >= 1 && item.id <= 7)\n//       .filter(item => item.score === 'ไม่ผ่าน').length;\n\n//     if (countFail >= 4) {\n//       setData(prevData =>\n//         prevData.map(item =>\n//           item.id === 8\n//             ? { ...item, score: 'ไม่ผ่านการประเมินหัวข้อ' }\n//             : item\n//         )\n//       );\n//     } else if (countPass >= 4) {\n//       setData(prevData =>\n//         prevData.map(item =>\n//           item.id === 8\n//             ? { ...item, score: 'ผ่านการประเมินหัวข้อ' }\n//             : item\n//         )\n//       );\n//     }\n//   };\n\n//   const checkAllChecked = () => {\n//     const allChecked = Data\n//       .filter(item => item.id >= 1 && item.id <= 7)\n//       .every(item => item.score === 'ผ่าน' || item.score === 'ไม่ผ่าน');\n//     setAllChecked(allChecked);\n//   };\n\n//   const handleSavePopup = async (e) => {\n//     if (allChecked) {\n//       e.preventDefault();\n//       try {\n//         await saveScore(); // Save the score\n//         // Remove only the selected project from the list\n//         setProjects(prevProjects => prevProjects.filter(project => project.P_id !== selectedProject.P_id));\n//         resetCheckboxData(); // Reset the form data\n//         setOpen(false); // Close the popup\n//       } catch (error) {\n//         console.error('Error saving score:', error);\n//       }\n//     } else {\n//       alert('กรุณาตรวจสอบให้ครบทุกหัวข้อก่อนทำการบันทึก');\n//     }\n//   };  \n\n//   const resetCheckboxData = () => {\n//     setData(initialData); // Reset to initial state\n//     setAllChecked(false); // Reset allChecked state\n//   };\n\n//   const saveScore = async () => {\n\n//   };\n\n//   return (\n//     <Paper style={{ padding: 16 }}>\n//       <Grid container spacing={gridSpacing}>\n//         <Grid item xs={12}>\n//           <Grid container direction=\"column\" spacing={1}>\n//             <h1>ประเมินการสอบหัวข้อโครงงานพิเศษ</h1>\n//             <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">\n//               ไม่เข้าร่วมประเมินทั้งหมด\n//             </Button>\n//             <TableContainer>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>ลำดับที่</TableCell>\n//                     <TableCell>ชื่อโครงงาน</TableCell>\n//                     <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\n//                     <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\n//                     <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {projects.map((project, index) => (\n//                     <TableRow key={project.P_id}>\n//                       <TableCell>{index + 1}</TableCell>\n//                       <TableCell>{project.P_name}</TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleLinkClick(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled}\n//                         >\n//                           ประเมิน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleDisableRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่ประสงค์ลงคะแนน\n//                         </Button>\n//                       </TableCell>\n//                       <TableCell>\n//                         <Button\n//                           onClick={() => handleRedRow(index)}\n//                           variant=\"outlined\"\n//                           disabled={project.isDisabled || project.isRed}\n//                         >\n//                           ไม่เข้าประเมิน\n//                         </Button>\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </Grid>\n//         </Grid>\n//       </Grid>\n\n//       {selectedProject && (\n//         <Dialog \n//           open={open} \n//           onClose={handleClose} \n//           maxWidth=\"lg\" \n//           fullWidth \n//           PaperProps={{\n//             style: {\n//               minHeight: '80vh', \n//               maxHeight: '90vh',\n//             }\n//           }}\n//         >\n//           <DialogTitle>รายละเอียดโครงงาน</DialogTitle>\n//           <DialogContent>\n//             <Typography variant=\"h3\">ชื่อโครงงาน: {selectedProject.P_name}</Typography>\n//             <Typography>นักเรียนคนที่ 1: {selectedProject.P_S1}</Typography>\n//             <Typography>นักเรียนคนที่ 2: {selectedProject.P_S2}</Typography>\n//             <Typography>ที่ปรึกษา: {selectedProject.P_T}</Typography>\n//             <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\n//             <TableContainer component={Paper}>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>ลำดับที่</TableCell>\n//                     <TableCell>เกณฑ์พิจารณา</TableCell>\n//                     <TableCell>คำอธิบาย</TableCell>\n//                     <TableCell>ผลการประเมิน</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {Data.map((item, index) => (\n//                     <TableRow key={item.id}>\n//                       <TableCell>{item.id}</TableCell>\n//                       <TableCell>{item.name}</TableCell>\n//                       <TableCell>\n//                         <ul>\n//                           {(item.description || []).map((desc, idx) => (\n//                             <li key={idx}>{desc}</li>\n//                           ))}\n//                         </ul>\n//                       </TableCell>\n//                       <TableCell>\n//                         {item.id === 8 ? (\n//                           <TextField value={item.score} disabled fullWidth margin=\"none\" />\n//                         ) : (\n//                           <div>\n//                             <label htmlFor={`pass-${index}`}>\n//                               <input\n//                                 type=\"radio\"\n//                                 id={`pass-${index}`}\n//                                 checked={item.score === \"ผ่าน\"}\n//                                 onChange={() => handleCheckboxChange(item.id, \"yes\")}\n//                               />\n//                               ผ่าน\n//                             </label>\n//                             <label htmlFor={`fail-${index}`}>\n//                               <input\n//                                 type=\"radio\"\n//                                 id={`fail-${index}`}\n//                                 checked={item.score === \"ไม่ผ่าน\"}\n//                                 onChange={() => handleCheckboxChange(item.id, \"no\")}\n//                               />\n//                               ไม่ผ่าน\n//                             </label>\n//                           </div>\n//                         )}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </DialogContent>\n\n//           <DialogActions>\n//             <Button onClick={handleSavePopup} color=\"primary\" disabled={!allChecked}>บันทึก</Button>\n//             <Button onClick={handleClose} color=\"primary\">ปิด</Button>\n//           </DialogActions>\n//         </Dialog>\n//       )}\n//     </Paper>\n//   );\n// }\n\n// export default InputScoreCSB01;","map":{"version":3,"names":[],"sources":["C:/test/create-react-app/src/views/utilities/InputScoreCSB01.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Button, Paper, Grid, Table, TextField, TableBody, TableCell, TableContainer, TableHead, TableRow, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';\r\n// import axios from 'axios';\r\n// import { gridSpacing } from 'store/constant';\r\n\r\n// function InputScoreCSB01() {\r\n//   const [projects, setProjects] = useState([]);\r\n//   const [examResults, setExamResults] = useState([]);\r\n//   const [open, setOpen] = useState(false);\r\n//   const [selectedProject, setSelectedProject] = useState(null);\r\n//   const [openDialog, setOpenDialog] = useState(false);\r\n//   const initialData = [\r\n//     { id: 1, name: 'การวิเคราะห์ปัญหา(Problem Analysis)', description: ['1. มีการระบุที่มาของปัญหา', '2. มีการนำเสนอข้อมูลทางสถิติหรือหลักฐานเพื่อสนับสนุนความสำคัญของปัญหา', '3. มีอ้างอิงแหล่งข้อมูลที่น่าเชื่อถือ'], score: '' },\r\n//     { id: 2, name: 'แนวคิด/ แนวทางของระบบ(Solution)', description: ['1. มีความสามารถแก้ปัญหาได้แท้จริง ตรงเป้า', '2. มีวิธีการที่นำเสนอที่มีประสิทธิภาพ'], score: '' },\r\n//     { id: 3, name: 'ขอบเขตและปริมาณงาน(Scope)', description: ['1. มีลักษณะและปริมาณงานเหมาะสมสำหรับปริญญานิพนธ์', '2. มีความเหมาะสมตามกรอบเวลา'], score: '' },\r\n//     { id: 4, name: 'ต้นแบบระบบ(System Prototype)', description: ['มีการนำเสนอต้นแบบระบบด้วยเครื่องมือที่มีความเหมาะสม เช่น Mockup, wireframe, story board และ system architecture'], score: '' },\r\n//     { id: 5, name: 'ลักษณะของกลุ่มผู้ใช้งาน(Target market)', description: ['1. มีการกำหนดเป้าหมายสำหรับการใช้งานระบบอย่างชัดเจน', '2. มีการศึกษาลักษณะกลุ่มเป้าหมาย', '3. มีการศึกษาผลกระทบที่คาดว่าจะเกิดต่อกลุ่มเป้าหมาย'], score: '' },\r\n//     { id: 6, name: 'การวิเคราะห์การตลาด (Market analysis)', description: ['1. มีการนำเสนอระบบที่ใกล้เคียง/ที่เกี่ยวข้องอย่างน้อย 2 ระบบ', '2. มีการระบุข้อจำกัดของระบบที่ใกล้เคียงหรือเกี่ยวข้อง', '3. มีการระบุความแตกต่างหรือจุดเด่นของระบบที่นำเสนอ'], score: '' },\r\n//     { id: 7, name: 'การศึกษาความเป็นไปได้ (Feasibility study)', description: ['1. มีการนำเสนอการศึกษาเทคนิคที่เกี่ยวข้องเบื้องต้น ', '2. มีการศึกษาข้อจำกัดของอุปกรณ์/ระบบที่เกี่ยวข้อง'], score: '' },\r\n//     { id: 8, name: 'ผลการประเมิน', score: '' },\r\n//   ];\r\n\r\n//   const [Data, setData] = useState(initialData);\r\n//   const [allChecked, setAllChecked] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const fetchProjects = async () => {\r\n\r\n//     };\r\n  \r\n//     fetchProjects();\r\n//   }, []);  \r\n\r\n//   useEffect(() => {\r\n//     updateFinalScore();\r\n//     checkAllChecked();\r\n//   }, [Data]);\r\n\r\n//   const handleDonNotGoAny = () => {\r\n//     const updatedData = projects.map(project => ({ ...project, isRed: true, isDisabled: true }));\r\n//     setProjects(updatedData);\r\n//   };\r\n\r\n//   const handleLinkClick = (index) => {\r\n//     setSelectedProject(projects[index]);\r\n//     setOpen(true);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//     resetCheckboxData(); // Reset checkbox values when closing the dialog\r\n//   };\r\n\r\n//   const handleDisableRow = (index) => {\r\n//     const updatedProjects = projects.map((project, i) =>\r\n//       i === index ? { ...project, isDisabled: true } : project\r\n//     );\r\n//     setProjects(updatedProjects);\r\n//   };\r\n\r\n//   const handleRedRow = (index) => {\r\n//     const updatedProjects = projects.map((project, i) =>\r\n//       i === index ? { ...project, isRed: true } : project\r\n//     );\r\n//     setProjects(updatedProjects);\r\n//   };\r\n\r\n//   const handleCheckboxChange = (id, type) => {\r\n//     setData(prevData =>\r\n//       prevData.map(item =>\r\n//         item.id === id\r\n//           ? { ...item, score: type === 'yes' ? 'ผ่าน' : 'ไม่ผ่าน' }\r\n//           : item\r\n//       )\r\n//     );\r\n//   };\r\n\r\n//   const updateFinalScore = () => {\r\n//     const countPass = Data\r\n//       .filter(item => item.id >= 1 && item.id <= 7)\r\n//       .filter(item => item.score === 'ผ่าน').length;\r\n\r\n//     const countFail = Data\r\n//       .filter(item => item.id >= 1 && item.id <= 7)\r\n//       .filter(item => item.score === 'ไม่ผ่าน').length;\r\n\r\n//     if (countFail >= 4) {\r\n//       setData(prevData =>\r\n//         prevData.map(item =>\r\n//           item.id === 8\r\n//             ? { ...item, score: 'ไม่ผ่านการประเมินหัวข้อ' }\r\n//             : item\r\n//         )\r\n//       );\r\n//     } else if (countPass >= 4) {\r\n//       setData(prevData =>\r\n//         prevData.map(item =>\r\n//           item.id === 8\r\n//             ? { ...item, score: 'ผ่านการประเมินหัวข้อ' }\r\n//             : item\r\n//         )\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const checkAllChecked = () => {\r\n//     const allChecked = Data\r\n//       .filter(item => item.id >= 1 && item.id <= 7)\r\n//       .every(item => item.score === 'ผ่าน' || item.score === 'ไม่ผ่าน');\r\n//     setAllChecked(allChecked);\r\n//   };\r\n\r\n//   const handleSavePopup = async (e) => {\r\n//     if (allChecked) {\r\n//       e.preventDefault();\r\n//       try {\r\n//         await saveScore(); // Save the score\r\n//         // Remove only the selected project from the list\r\n//         setProjects(prevProjects => prevProjects.filter(project => project.P_id !== selectedProject.P_id));\r\n//         resetCheckboxData(); // Reset the form data\r\n//         setOpen(false); // Close the popup\r\n//       } catch (error) {\r\n//         console.error('Error saving score:', error);\r\n//       }\r\n//     } else {\r\n//       alert('กรุณาตรวจสอบให้ครบทุกหัวข้อก่อนทำการบันทึก');\r\n//     }\r\n//   };  \r\n\r\n//   const resetCheckboxData = () => {\r\n//     setData(initialData); // Reset to initial state\r\n//     setAllChecked(false); // Reset allChecked state\r\n//   };\r\n\r\n//   const saveScore = async () => {\r\n    \r\n//   };\r\n  \r\n//   return (\r\n//     <Paper style={{ padding: 16 }}>\r\n//       <Grid container spacing={gridSpacing}>\r\n//         <Grid item xs={12}>\r\n//           <Grid container direction=\"column\" spacing={1}>\r\n//             <h1>ประเมินการสอบหัวข้อโครงงานพิเศษ</h1>\r\n//             <Button onClick={handleDonNotGoAny} variant=\"contained\" color=\"error\">\r\n//               ไม่เข้าร่วมประเมินทั้งหมด\r\n//             </Button>\r\n//             <TableContainer>\r\n//               <Table>\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>ลำดับที่</TableCell>\r\n//                     <TableCell>ชื่อโครงงาน</TableCell>\r\n//                     <TableCell>ประเมินการสอบโครงงานพิเศษ</TableCell>\r\n//                     <TableCell>ไม่ประสงค์ลงคะแนนสอบ</TableCell>\r\n//                     <TableCell>ไม่เข้าประเมินการสอบ</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {projects.map((project, index) => (\r\n//                     <TableRow key={project.P_id}>\r\n//                       <TableCell>{index + 1}</TableCell>\r\n//                       <TableCell>{project.P_name}</TableCell>\r\n//                       <TableCell>\r\n//                         <Button\r\n//                           onClick={() => handleLinkClick(index)}\r\n//                           variant=\"outlined\"\r\n//                           disabled={project.isDisabled}\r\n//                         >\r\n//                           ประเมิน\r\n//                         </Button>\r\n//                       </TableCell>\r\n//                       <TableCell>\r\n//                         <Button\r\n//                           onClick={() => handleDisableRow(index)}\r\n//                           variant=\"outlined\"\r\n//                           disabled={project.isDisabled || project.isRed}\r\n//                         >\r\n//                           ไม่ประสงค์ลงคะแนน\r\n//                         </Button>\r\n//                       </TableCell>\r\n//                       <TableCell>\r\n//                         <Button\r\n//                           onClick={() => handleRedRow(index)}\r\n//                           variant=\"outlined\"\r\n//                           disabled={project.isDisabled || project.isRed}\r\n//                         >\r\n//                           ไม่เข้าประเมิน\r\n//                         </Button>\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//           </Grid>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       {selectedProject && (\r\n//         <Dialog \r\n//           open={open} \r\n//           onClose={handleClose} \r\n//           maxWidth=\"lg\" \r\n//           fullWidth \r\n//           PaperProps={{\r\n//             style: {\r\n//               minHeight: '80vh', \r\n//               maxHeight: '90vh',\r\n//             }\r\n//           }}\r\n//         >\r\n//           <DialogTitle>รายละเอียดโครงงาน</DialogTitle>\r\n//           <DialogContent>\r\n//             <Typography variant=\"h3\">ชื่อโครงงาน: {selectedProject.P_name}</Typography>\r\n//             <Typography>นักเรียนคนที่ 1: {selectedProject.P_S1}</Typography>\r\n//             <Typography>นักเรียนคนที่ 2: {selectedProject.P_S2}</Typography>\r\n//             <Typography>ที่ปรึกษา: {selectedProject.P_T}</Typography>\r\n//             <h2>ตารางลงคะแนนสำหรับกรรมการสอบ</h2>\r\n//             <TableContainer component={Paper}>\r\n//               <Table>\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>ลำดับที่</TableCell>\r\n//                     <TableCell>เกณฑ์พิจารณา</TableCell>\r\n//                     <TableCell>คำอธิบาย</TableCell>\r\n//                     <TableCell>ผลการประเมิน</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {Data.map((item, index) => (\r\n//                     <TableRow key={item.id}>\r\n//                       <TableCell>{item.id}</TableCell>\r\n//                       <TableCell>{item.name}</TableCell>\r\n//                       <TableCell>\r\n//                         <ul>\r\n//                           {(item.description || []).map((desc, idx) => (\r\n//                             <li key={idx}>{desc}</li>\r\n//                           ))}\r\n//                         </ul>\r\n//                       </TableCell>\r\n//                       <TableCell>\r\n//                         {item.id === 8 ? (\r\n//                           <TextField value={item.score} disabled fullWidth margin=\"none\" />\r\n//                         ) : (\r\n//                           <div>\r\n//                             <label htmlFor={`pass-${index}`}>\r\n//                               <input\r\n//                                 type=\"radio\"\r\n//                                 id={`pass-${index}`}\r\n//                                 checked={item.score === \"ผ่าน\"}\r\n//                                 onChange={() => handleCheckboxChange(item.id, \"yes\")}\r\n//                               />\r\n//                               ผ่าน\r\n//                             </label>\r\n//                             <label htmlFor={`fail-${index}`}>\r\n//                               <input\r\n//                                 type=\"radio\"\r\n//                                 id={`fail-${index}`}\r\n//                                 checked={item.score === \"ไม่ผ่าน\"}\r\n//                                 onChange={() => handleCheckboxChange(item.id, \"no\")}\r\n//                               />\r\n//                               ไม่ผ่าน\r\n//                             </label>\r\n//                           </div>\r\n//                         )}\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//           </DialogContent>\r\n\r\n//           <DialogActions>\r\n//             <Button onClick={handleSavePopup} color=\"primary\" disabled={!allChecked}>บันทึก</Button>\r\n//             <Button onClick={handleClose} color=\"primary\">ปิด</Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       )}\r\n//     </Paper>\r\n//   );\r\n// }\r\n\r\n// export default InputScoreCSB01;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}